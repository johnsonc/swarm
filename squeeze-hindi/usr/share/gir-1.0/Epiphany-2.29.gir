<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="2.0"/>
  <include name="JSCore" version="1.0"/>
  <include name="Pango" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <include name="WebKit" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="libxml2" version="2.0"/>
  <include name="xlib" version="2.0"/>
  <package name="epiphany-2.29"/>
  <namespace name="Epiphany"
             version="2.29"
             shared-library=""
             c:prefix="Epiphany">
    <constant name="BOOKMARKS_HIERARCHY_SEP" value="-&gt;">
      <type name="utf8"/>
    </constant>
    <constant name="EGG_TOOLBAR_ITEM_TYPE" value="application/x-toolbar-item">
      <type name="utf8"/>
    </constant>
    <constant name="EPHY_WEB_VIEW_CHROME_ALL" value="0">
      <type name="int"/>
    </constant>
    <constant name="EPT_COOKIE" value="cookie">
      <type name="utf8"/>
    </constant>
    <constant name="EPT_IMAGE" value="image">
      <type name="utf8"/>
    </constant>
    <constant name="EPT_POPUP" value="popup">
      <type name="utf8"/>
    </constant>
    <class name="EggEditableToolbar"
           c:type="EggEditableToolbar"
           parent="Gtk.VBox"
           glib:type-name="EggEditableToolbar"
           glib:get-type="egg_editable_toolbar_get_type"
           glib:type-struct="EggEditableToolbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="egg_editable_toolbar_new">
        <return-value transfer-ownership="full">
          <type name="EggEditableToolbar" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <type name="Gtk.UIManager" c:type="GtkUIManager*"/>
          </parameter>
          <parameter name="visibility_path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_model"
                   c:identifier="egg_editable_toolbar_new_with_model">
        <return-value transfer-ownership="full">
          <type name="EggEditableToolbar" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <type name="Gtk.UIManager" c:type="GtkUIManager*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
          </parameter>
          <parameter name="visibility_path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_model" c:identifier="egg_editable_toolbar_set_model">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="model" transfer-ownership="none">
            <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model" c:identifier="egg_editable_toolbar_get_model">
        <return-value transfer-ownership="full">
          <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
        </return-value>
      </method>
      <method name="get_manager"
              c:identifier="egg_editable_toolbar_get_manager">
        <return-value transfer-ownership="full">
          <type name="Gtk.UIManager" c:type="GtkUIManager*"/>
        </return-value>
      </method>
      <method name="set_edit_mode"
              c:identifier="egg_editable_toolbar_set_edit_mode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_edit_mode"
              c:identifier="egg_editable_toolbar_get_edit_mode">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="show" c:identifier="egg_editable_toolbar_show">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="egg_editable_toolbar_hide">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fixed" c:identifier="egg_editable_toolbar_set_fixed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fixed_toolbar" transfer-ownership="none">
            <type name="Gtk.Toolbar" c:type="GtkToolbar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selected"
              c:identifier="egg_editable_toolbar_get_selected">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_selected"
              c:identifier="egg_editable_toolbar_set_selected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_visibility"
              c:identifier="egg_editable_toolbar_add_visibility">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="edit-mode" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="model" writable="1">
        <type name="EggToolbarsModel" c:type="EggToolbarsModel"/>
      </property>
      <property name="popup-path" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="selected">
        <type name="Gtk.ToolItem" c:type="GtkToolItem"/>
      </property>
      <property name="ui-manager" writable="1">
        <type name="Gtk.UIManager" c:type="GtkUIManager"/>
      </property>
      <field name="parent_object">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="EggEditableToolbarPrivate"
              c:type="EggEditableToolbarPrivate*"/>
      </field>
      <glib:signal name="action-request">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EggEditableToolbarClass"
            c:type="EggEditableToolbarClass"
            glib:is-gtype-struct-for="EggEditableToolbar">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
      <field name="action_request">
        <callback name="action_request" c:type="action_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="etoolbar" transfer-ownership="none">
              <type name="EggEditableToolbar" c:type="EggEditableToolbar*"/>
            </parameter>
            <parameter name="action_name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EggEditableToolbarPrivate"
            c:type="EggEditableToolbarPrivate">
    </record>
    <bitfield name="EggTbModelFlags"
              glib:type-name="EggTbModelFlags"
              glib:get-type="egg_tb_model_flags_get_type"
              c:type="EggTbModelFlags">
      <member name="not_removable"
              value="1"
              c:identifier="EGG_TB_MODEL_NOT_REMOVABLE"
              glib:nick="not-removable"/>
      <member name="not_editable"
              value="2"
              c:identifier="EGG_TB_MODEL_NOT_EDITABLE"
              glib:nick="not-editable"/>
      <member name="both"
              value="4"
              c:identifier="EGG_TB_MODEL_BOTH"
              glib:nick="both"/>
      <member name="both_horiz"
              value="8"
              c:identifier="EGG_TB_MODEL_BOTH_HORIZ"
              glib:nick="both-horiz"/>
      <member name="icons"
              value="16"
              c:identifier="EGG_TB_MODEL_ICONS"
              glib:nick="icons"/>
      <member name="text"
              value="32"
              c:identifier="EGG_TB_MODEL_TEXT"
              glib:nick="text"/>
      <member name="styles_mask"
              value="60"
              c:identifier="EGG_TB_MODEL_STYLES_MASK"
              glib:nick="styles-mask"/>
      <member name="accept_items_only"
              value="64"
              c:identifier="EGG_TB_MODEL_ACCEPT_ITEMS_ONLY"
              glib:nick="accept-items-only"/>
      <member name="hidden"
              value="128"
              c:identifier="EGG_TB_MODEL_HIDDEN"
              glib:nick="hidden"/>
    </bitfield>
    <bitfield name="EggTbModelNameFlags" c:type="EggTbModelNameFlags">
      <member name="used" value="1" c:identifier="EGG_TB_MODEL_NAME_USED"/>
      <member name="infinite"
              value="2"
              c:identifier="EGG_TB_MODEL_NAME_INFINITE"/>
      <member name="known" value="4" c:identifier="EGG_TB_MODEL_NAME_KNOWN"/>
    </bitfield>
    <record name="EggToolbarsItemType" c:type="EggToolbarsItemType">
      <field name="type" writable="1">
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </field>
      <field name="has_data">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="get_data">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="new_name">
        <type name="any" c:type="pointer"/>
      </field>
      <field name="get_name">
        <type name="any" c:type="pointer"/>
      </field>
    </record>
    <class name="EggToolbarsModel"
           c:type="EggToolbarsModel"
           parent="GObject.Object"
           glib:type-name="EggToolbarsModel"
           glib:get-type="egg_toolbars_model_get_type"
           glib:type-struct="EggToolbarsModelClass">
      <constructor name="new" c:identifier="egg_toolbars_model_new">
        <return-value transfer-ownership="full">
          <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
        </return-value>
      </constructor>
      <virtual-method name="add_item" invoker="add_item">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load_names" c:identifier="egg_toolbars_model_load_names">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="xml_file" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_toolbars"
              c:identifier="egg_toolbars_model_load_toolbars">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="xml_file" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_toolbars"
              c:identifier="egg_toolbars_model_save_toolbars">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xml_file" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_types" c:identifier="egg_toolbars_model_get_types">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="set_types" c:identifier="egg_toolbars_model_set_types">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="types" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="egg_toolbars_model_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="create" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="egg_toolbars_model_get_data">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name_avail"
              c:identifier="egg_toolbars_model_get_name_avail">
        <return-value transfer-ownership="full">
          <array name="GLib.PtrArray" c:type="GPtrArray*">
          </array>
        </return-value>
      </method>
      <method name="get_name_flags"
              c:identifier="egg_toolbars_model_get_name_flags">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name_flags"
              c:identifier="egg_toolbars_model_set_name_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="egg_toolbars_model_get_flags">
        <return-value transfer-ownership="full">
          <type name="EggTbModelFlags" c:type="EggTbModelFlags"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="egg_toolbars_model_set_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="EggTbModelFlags" c:type="EggTbModelFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_toolbar" c:identifier="egg_toolbars_model_add_toolbar">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_toolbar"
              c:identifier="egg_toolbars_model_remove_toolbar">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item" c:identifier="egg_toolbars_model_add_item">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_item" c:identifier="egg_toolbars_model_remove_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_item" c:identifier="egg_toolbars_model_move_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="new_toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="new_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_item" c:identifier="egg_toolbars_model_delete_item">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="n_items" c:identifier="egg_toolbars_model_n_items">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="item_nth" c:identifier="egg_toolbars_model_item_nth">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="toolbar_position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="n_toolbars" c:identifier="egg_toolbars_model_n_toolbars">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="toolbar_nth" c:identifier="egg_toolbars_model_toolbar_nth">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EggToolbarsModelPrivate"
              c:type="EggToolbarsModelPrivate*"/>
      </field>
      <glib:signal name="item-added">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="item-removed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toolbar-added">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toolbar-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="toolbar-removed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EggToolbarsModelClass"
            c:type="EggToolbarsModelClass"
            glib:is-gtype-struct-for="EggToolbarsModel">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="item_added">
        <callback name="item_added" c:type="item_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="model" transfer-ownership="none">
              <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
            </parameter>
            <parameter name="toolbar_position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="item_removed">
        <callback name="item_removed" c:type="item_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="model" transfer-ownership="none">
              <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
            </parameter>
            <parameter name="toolbar_position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toolbar_added">
        <callback name="toolbar_added" c:type="toolbar_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="model" transfer-ownership="none">
              <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toolbar_changed">
        <callback name="toolbar_changed" c:type="toolbar_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="model" transfer-ownership="none">
              <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="toolbar_removed">
        <callback name="toolbar_removed" c:type="toolbar_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="model" transfer-ownership="none">
              <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_item">
        <callback name="add_item" c:type="add_item">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="t" transfer-ownership="none">
              <type name="EggToolbarsModel" c:type="EggToolbarsModel*"/>
            </parameter>
            <parameter name="toolbar_position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="int"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EggToolbarsModelPrivate" c:type="EggToolbarsModelPrivate">
    </record>
    <enumeration name="EphyBookmarkProperty" c:type="EphyBookmarkProperty">
      <member name="bmk_prop_title"
              value="2"
              c:identifier="EPHY_NODE_BMK_PROP_TITLE"/>
      <member name="bmk_prop_location"
              value="3"
              c:identifier="EPHY_NODE_BMK_PROP_LOCATION"/>
      <member name="bmk_prop_keywords"
              value="4"
              c:identifier="EPHY_NODE_BMK_PROP_KEYWORDS"/>
      <member name="keyword_prop_name"
              value="5"
              c:identifier="EPHY_NODE_KEYWORD_PROP_NAME"/>
      <member name="bmk_prop_usericon"
              value="6"
              c:identifier="EPHY_NODE_BMK_PROP_USERICON"/>
      <member name="bmk_prop_icon"
              value="7"
              c:identifier="EPHY_NODE_BMK_PROP_ICON"/>
      <member name="keyword_prop_priority"
              value="8"
              c:identifier="EPHY_NODE_KEYWORD_PROP_PRIORITY"/>
      <member name="bmk_prop_service_id"
              value="14"
              c:identifier="EPHY_NODE_BMK_PROP_SERVICE_ID"/>
      <member name="bmk_prop_immutable"
              value="15"
              c:identifier="EPHY_NODE_BMK_PROP_IMMUTABLE"/>
    </enumeration>
    <class name="EphyBookmarks"
           c:type="EphyBookmarks"
           parent="GObject.Object"
           glib:type-name="EphyBookmarks"
           glib:get-type="ephy_bookmarks_get_type"
           glib:type-struct="EphyBookmarksClass">
      <constructor name="new" c:identifier="ephy_bookmarks_new">
        <return-value transfer-ownership="full">
          <type name="EphyBookmarks" c:type="EphyBookmarks*"/>
        </return-value>
      </constructor>
      <function name="get_smart_bookmark_width"
                c:identifier="ephy_bookmarks_get_smart_bookmark_width">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_topics"
                c:identifier="ephy_bookmarks_compare_topics">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_topic_pointers"
                c:identifier="ephy_bookmarks_compare_topic_pointers">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_bookmarks"
                c:identifier="ephy_bookmarks_compare_bookmarks">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_bookmark_pointers"
                c:identifier="ephy_bookmarks_compare_bookmark_pointers">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="any" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_from_id" c:identifier="ephy_bookmarks_get_from_id">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="long" c:type="long"/>
          </parameter>
        </parameters>
      </method>
      <method name="add" c:identifier="ephy_bookmarks_add">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_bookmark" c:identifier="ephy_bookmarks_find_bookmark">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_similar" c:identifier="ephy_bookmarks_get_similar">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
          <parameter name="identical" transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="GPtrArray*">
            </array>
          </parameter>
          <parameter name="similar" transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="GPtrArray*">
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="ephy_bookmarks_set_icon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_usericon" c:identifier="ephy_bookmarks_set_usericon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address" c:identifier="ephy_bookmarks_set_address">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_address"
              c:identifier="ephy_bookmarks_resolve_address">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_keyword" c:identifier="ephy_bookmarks_add_keyword">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_keyword" c:identifier="ephy_bookmarks_find_keyword">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="partial_match" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_keyword"
              c:identifier="ephy_bookmarks_remove_keyword">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_keyword" c:identifier="ephy_bookmarks_has_keyword">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keyword" c:identifier="ephy_bookmarks_set_keyword">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_keyword" c:identifier="ephy_bookmarks_unset_keyword">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_topic_uri" c:identifier="ephy_bookmarks_get_topic_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_favorites" c:identifier="ephy_bookmarks_get_favorites">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_keywords" c:identifier="ephy_bookmarks_get_keywords">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_bookmarks" c:identifier="ephy_bookmarks_get_bookmarks">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_not_categorized"
              c:identifier="ephy_bookmarks_get_not_categorized">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_smart_bookmarks"
              c:identifier="ephy_bookmarks_get_smart_bookmarks">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_local" c:identifier="ephy_bookmarks_get_local">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyBookmarksPrivate" c:type="EphyBookmarksPrivate*"/>
      </field>
      <glib:signal name="resolve-address">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchararray"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tree-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyBookmarksClass"
            c:type="EphyBookmarksClass"
            glib:is-gtype-struct-for="EphyBookmarks">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="tree_changed">
        <callback name="tree_changed" c:type="tree_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="eb" transfer-ownership="none">
              <type name="EphyBookmarks" c:type="EphyBookmarks*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resolve_address">
        <callback name="resolve_address" c:type="resolve_address">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="eb" transfer-ownership="none">
              <type name="EphyBookmarks" c:type="EphyBookmarks*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="argument" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyBookmarksPrivate" c:type="EphyBookmarksPrivate">
    </record>
    <class name="EphyDialog"
           c:type="EphyDialog"
           parent="GObject.Object"
           glib:type-name="EphyDialog"
           glib:get-type="ephy_dialog_get_type"
           glib:type-struct="EphyDialogClass">
      <constructor name="new"
                   c:identifier="ephy_dialog_new"
                   doc="Creates a new #EphyDialog.">
        <return-value transfer-ownership="full">
          <type name="EphyDialog" c:type="EphyDialog*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_parent"
                   c:identifier="ephy_dialog_new_with_parent"
                   doc="Creates a new #EphyDialog with @parent_window as its parent.">
        <return-value transfer-ownership="full">
          <type name="EphyDialog" c:type="EphyDialog*"/>
        </return-value>
        <parameters>
          <parameter name="parent_window" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="construct" invoker="construct">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="properties" transfer-ownership="none">
            <type name="EphyDialogProperty" c:type="EphyDialogProperty*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show" invoker="show">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="construct"
              c:identifier="ephy_dialog_construct"
              doc="Constructs the widget part of @dialog using the widget identified by @name
in the #GtkBuilder file found at @file. Fills the dialog properties with">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="properties" transfer-ownership="none">
            <type name="EphyDialogProperty" c:type="EphyDialogProperty*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_enum"
              c:identifier="ephy_dialog_add_enum"
              doc="Modifies the property identified by @property_id in @dialog to have its
string_enum member set to a #GList constructed with the elements given as">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="n_items" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="items" transfer-ownership="none">
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_column"
              c:identifier="ephy_dialog_set_data_column"
              doc="Sets the data_col member of the property identified by @property_id in @dialog
to @column.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size_group"
              c:identifier="ephy_dialog_set_size_group"
              doc="Put @first_id and @Varargs widgets into the same #GtkSizeGroup.
Note that this are all widgets inside @dialog.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="run"
              c:identifier="ephy_dialog_run"
              doc="Runs gtk_dialog_run on @dialog and waits for a response.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="show"
              c:identifier="ephy_dialog_show"
              doc="Shows @dialog on screen.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hide"
              c:identifier="ephy_dialog_hide"
              doc="Calls gtk_widget_hide on @dialog.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_parent"
              c:identifier="ephy_dialog_set_parent"
              doc="Sets @parent as the parent-window of @dialog.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="ephy_dialog_get_parent"
              doc="Gets @dialog&apos;s parent-window.">
        <return-value transfer-ownership="none"
                      doc="the parent-window of @dialog">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_modal"
              c:identifier="ephy_dialog_set_modal"
              doc="Sets @dialog to be modal or not.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_modal" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_control"
              c:identifier="ephy_dialog_get_control"
              doc="Gets the internal widget corresponding to @property_id from @dialog.
or %NULL">
        <return-value transfer-ownership="none"
                      doc="the #GtkWidget corresponding to @property_id">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ephy_dialog_get_value"
              doc="Gets the value of @property_id and stores it in @value.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     doc="location to store the value of @property_id">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ephy_dialog_set_value"
              doc="Sets the property identified by @property_id to @value in @dialog.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pref"
              c:identifier="ephy_dialog_set_pref"
              doc="Sets the pref member of the property of @dialog identified by @property_id
to @pref.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="pref" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-height" writable="1" construct-only="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="default-width" writable="1" construct-only="1">
        <type name="int" c:type="gint"/>
      </property>
      <property name="modal" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="parent-window" writable="1">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </property>
      <property name="persist-position" writable="1" construct-only="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyDialogPrivate" c:type="EphyDialogPrivate*"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="EphyDialogApplyType" c:type="EphyDialogApplyType">
      <member name="normal" value="0" c:identifier="PT_NORMAL"/>
      <member name="autoapply" value="1" c:identifier="PT_AUTOAPPLY"/>
      <member name="inverted" value="2" c:identifier="PT_INVERTED"/>
    </bitfield>
    <record name="EphyDialogClass"
            c:type="EphyDialogClass"
            glib:is-gtype-struct-for="EphyDialog">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="EphyDialog" c:type="EphyDialog*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct">
        <callback name="construct" c:type="construct">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="EphyDialog" c:type="EphyDialog*"/>
            </parameter>
            <parameter name="properties" transfer-ownership="none">
              <type name="EphyDialogProperty" c:type="EphyDialogProperty*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show">
        <callback name="show" c:type="show">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="EphyDialog" c:type="EphyDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyDialogPrivate" c:type="EphyDialogPrivate">
    </record>
    <record name="EphyDialogProperty" c:type="EphyDialogProperty">
      <field name="id" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="pref" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="apply_type" writable="1">
        <type name="EphyDialogApplyType" c:type="EphyDialogApplyType"/>
      </field>
      <field name="data_type" writable="1">
        <type name="GType" c:type="GType"/>
      </field>
    </record>
    <class name="EphyEmbed"
           c:type="EphyEmbed"
           parent="Gtk.VBox"
           glib:type-name="EphyEmbed"
           glib:get-type="ephy_embed_get_type"
           glib:type-struct="EphyEmbedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <method name="get_web_view"
              c:identifier="ephy_embed_get_web_view"
              doc="Returns the #EphyWebView wrapped by @embed.">
        <return-value transfer-ownership="none" doc="an #EphyWebView">
          <type name="EphyWebView" c:type="EphyWebView*"/>
        </return-value>
      </method>
      <method name="add_top_widget"
              c:identifier="ephy_embed_add_top_widget"
              doc="Adds a #GtkWidget to the top of the embed.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="destroy_on_transition"
                     transfer-ownership="none"
                     doc=" destroyed on page transitions">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_top_widget"
              c:identifier="ephy_embed_remove_top_widget"
              doc="Removes an #GtkWidget from the top of the embed. The #GtkWidget
must be have been added using ephy_embed_add_widget(), and not
have been removed by other means. See gtk_container_remove() for
details.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="auto_download_url"
              c:identifier="ephy_embed_auto_download_url">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.VBox" c:type="GtkVBox"/>
      </field>
      <field name="priv">
        <type name="EphyEmbedPrivate" c:type="EphyEmbedPrivate*"/>
      </field>
    </class>
    <record name="EphyEmbedClass"
            c:type="EphyEmbedClass"
            glib:is-gtype-struct-for="EphyEmbed">
      <field name="parent_class">
        <type name="Gtk.VBoxClass" c:type="GtkVBoxClass"/>
      </field>
    </record>
    <interface name="EphyEmbedContainer"
               c:type="EphyEmbedContainer"
               glib:type-name="EphyEmbedContainer"
               glib:get-type="ephy_embed_container_get_type"
               glib:type-struct="EphyEmbedContainerIface">
      <virtual-method name="add_child" invoker="add_child">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="set_active" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_active_child" invoker="set_active_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_child" invoker="remove_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_active_child" invoker="get_active_child">
        <return-value transfer-ownership="full">
          <type name="EphyEmbed" c:type="EphyEmbed*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_children" invoker="get_children">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_is_popup" invoker="get_is_popup">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_chrome" invoker="get_chrome">
        <return-value transfer-ownership="full">
          <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
        </return-value>
      </virtual-method>
      <method name="add_child"
              c:identifier="ephy_embed_container_add_child"
              doc="Inserts @child into @container.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
          <parameter name="set_active"
                     transfer-ownership="none"
                     doc=" after insertion">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_child"
              c:identifier="ephy_embed_container_set_active_child"
              doc="Sets @child as @container&apos;s active child.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_child"
              c:identifier="ephy_embed_container_remove_child"
              doc="Removes @child from @container.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_child"
              c:identifier="ephy_embed_container_get_active_child"
              doc="Returns @container&apos;s active #EphyEmbed.">
        <return-value transfer-ownership="none"
                      doc="@container&apos;s active child">
          <type name="EphyEmbed" c:type="EphyEmbed*"/>
        </return-value>
      </method>
      <method name="get_children"
              c:identifier="ephy_embed_container_get_children"
              doc="Returns the list of #EphyEmbed:s in the container.
a newly-allocated list of #EphyEmbed:s">
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="EphyEmbed"/>
          </type>
        </return-value>
      </method>
      <method name="get_is_popup"
              c:identifier="ephy_embed_container_get_is_popup"
              doc="Returns whether this embed container is a popup.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_chrome"
              c:identifier="ephy_embed_container_get_chrome"
              doc="Returns the #EphyWebViewChrome flags indicating the visibility of several parts
of the UI.">
        <return-value transfer-ownership="full">
          <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
        </return-value>
      </method>
      <property name="active-child" writable="1">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </property>
      <property name="chrome" writable="1" construct-only="1">
        <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
      </property>
      <property name="is-popup" writable="1" construct-only="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
    </interface>
    <record name="EphyEmbedContainerIface"
            c:type="EphyEmbedContainerIface"
            glib:is-gtype-struct-for="EphyEmbedContainer">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="add_child">
        <callback name="add_child" c:type="add_child">
          <return-value transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="int" c:type="gint"/>
            </parameter>
            <parameter name="set_active" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_active_child">
        <callback name="set_active_child" c:type="set_active_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_child">
        <callback name="remove_child" c:type="remove_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_child">
        <callback name="get_active_child" c:type="get_active_child">
          <return-value transfer-ownership="full">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_children">
        <callback name="get_children" c:type="get_children">
          <return-value transfer-ownership="full">
            <type name="GLib.List" c:type="GList*"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_popup">
        <callback name="get_is_popup" c:type="get_is_popup">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chrome">
        <callback name="get_chrome" c:type="get_chrome">
          <return-value transfer-ownership="full">
            <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EphyEmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EphyEmbedEvent"
           c:type="EphyEmbedEvent"
           parent="GObject.Object"
           glib:type-name="EphyEmbedEvent"
           glib:get-type="ephy_embed_event_get_type"
           glib:type-struct="EphyEmbedEventClass">
      <constructor name="new" c:identifier="ephy_embed_event_new">
        <return-value transfer-ownership="full">
          <type name="EphyEmbedEvent" c:type="EphyEmbedEvent*"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
          </parameter>
          <parameter name="hit_test_result" transfer-ownership="none">
            <type name="WebKit.HitTestResult" c:type="WebKitHitTestResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_context" c:identifier="ephy_embed_event_get_context">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_button" c:identifier="ephy_embed_event_get_button">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_modifier" c:identifier="ephy_embed_event_get_modifier">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_coords" c:identifier="ephy_embed_event_get_coords">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="uint" c:type="guint*"/>
          </parameter>
          <parameter name="y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="uint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property" c:identifier="ephy_embed_event_get_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_property" c:identifier="ephy_embed_event_has_property">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyEmbedEventPrivate" c:type="EphyEmbedEventPrivate*"/>
      </field>
    </class>
    <record name="EphyEmbedEventClass"
            c:type="EphyEmbedEventClass"
            glib:is-gtype-struct-for="EphyEmbedEvent">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EphyEmbedEventPrivate" c:type="EphyEmbedEventPrivate">
    </record>
    <class name="EphyEmbedPersist"
           c:type="EphyEmbedPersist"
           parent="GObject.Object"
           glib:type-name="EphyEmbedPersist"
           glib:get-type="ephy_embed_persist_get_type"
           glib:type-struct="EphyEmbedPersistClass">
      <method name="save"
              c:identifier="ephy_embed_persist_save"
              doc="Begins saving the file specified in @persist.
If @persist&apos;s #EphyEmbedPersistFlags include %EPHY_EMBED_PERSIST_ASK_DESTINATION, a
filechooser dialog will be shown first. If this flag is not set and no
destination has been set, the target will be saved to the default download
directory using the suggested name, if no suggested name can be get the
download will fail.
The file will continue to download in the background until either the
::completed or the ::cancelled signals are emitted by @persist.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="cancel"
              c:identifier="ephy_embed_persist_cancel"
              doc="Cancels @persist&apos;s download. This will not delete the partially downloaded
file.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_dest"
              c:identifier="ephy_embed_persist_set_dest"
              doc="Sets the path to which @persist should save data.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_embed"
              c:identifier="ephy_embed_persist_set_embed"
              doc="Sets the #EphyEmbed from which @persist will download data.
An #EphyEmbed is absolutely required to download if @persist&apos;s
#EphyEmbedPersistFlags include %EPHY_EMBED_PERSIST_COPY_PAGE. Regardless, an
#EphyEmbed should be set for &lt;emphasis&gt;every&lt;/emphasis&gt; #EphyEmbedPersist,
since it determines request information such as the referring page.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fc_title"
              c:identifier="ephy_embed_persist_set_fc_title"
              doc="Sets the title of the filechooser window. The filechooser will only be
displayed if %EPHY_EMBED_PERSIST_ASK_DESTINATION has been set with
ephy_embed_persist_set_flags().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fc_parent"
              c:identifier="ephy_embed_persist_set_fc_parent"
              doc="Sets the #EphyWindow which should be @persist&apos;s filechooser&apos;s parent. The
filechooser will only be displayed if %EPHY_EMBED_PERSIST_ASK_DESTINATION
has been set with ephy_embed_persist_set_flags().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="ephy_embed_persist_set_flags"
              doc="Sets the flags to be used for @persist&apos;s download.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="EphyEmbedPersistFlags" c:type="EphyEmbedPersistFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_size"
              c:identifier="ephy_embed_persist_set_max_size"
              doc="Sets the maximum size of @persist&apos;s download.
If the requested file is discovered to be larger than @value, the download
will be aborted. Note that @persist will have to actually begin downloading
before it can abort, since it doesn&apos;t know the filesize before the download
starts.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="int64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_persist_key"
              c:identifier="ephy_embed_persist_set_persist_key"
              doc="Sets the GConf key from which @persist will determine the default download
directory.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="ephy_embed_persist_set_source"
              doc="Sets the URL from which @persist should download. This should be used in
conjunction with ephy_embed_persist_set_embed().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_time"
              c:identifier="ephy_embed_persist_set_user_time"
              doc="Sets the time stamp of the user action which created @persist.
Defaults to gtk_get_current_event_time() when @persist is created.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_time" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dest"
              c:identifier="ephy_embed_persist_get_dest"
              doc="Returns the destination filename to which @persist will save its download.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_embed"
              c:identifier="ephy_embed_persist_get_embed"
              doc="Returns the #EphyEmbed from which @persist will download.
will download">
        <return-value transfer-ownership="none"
                      doc="the #EphyEmbed from which @persist">
          <type name="EphyEmbed" c:type="EphyEmbed*"/>
        </return-value>
      </method>
      <method name="get_fc_title"
              c:identifier="ephy_embed_persist_get_fc_title"
              doc="Returns the title to be displayed in @persist&apos;s filechooser.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_fc_parent"
              c:identifier="ephy_embed_persist_get_fc_parent"
              doc="Returns the #EphyWindow which should serve as a parent for @persist&apos;s
filechooser.
filechooser">
        <return-value transfer-ownership="none"
                      doc="the #EphyWindow parent for @persist&apos;s">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </return-value>
      </method>
      <method name="get_flags"
              c:identifier="ephy_embed_persist_get_flags"
              doc="Returns @persist&apos;s #EphyEmbedPersistFlags.">
        <return-value transfer-ownership="full">
          <type name="EphyEmbedPersistFlags" c:type="EphyEmbedPersistFlags"/>
        </return-value>
      </method>
      <method name="get_max_size"
              c:identifier="ephy_embed_persist_get_max_size"
              doc="Returns the maximum size of @persist&apos;s requested download, in bytes.">
        <return-value transfer-ownership="none">
          <type name="int64" c:type="gint64"/>
        </return-value>
      </method>
      <method name="get_persist_key"
              c:identifier="ephy_embed_persist_get_persist_key"
              doc="Returns the GConf key which determines Epiphany&apos;s default download directory.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_source"
              c:identifier="ephy_embed_persist_get_source"
              doc="Returns the source URL of the file to download.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_user_time"
              c:identifier="ephy_embed_persist_get_user_time"
              doc="Returns the timestamp of the user action which created @persist.
If not set explicitly, defaults to gtk_get_current_event_time ()
at the time of creation of @persist.">
        <return-value transfer-ownership="none">
          <type name="uint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="to_string"
              c:identifier="ephy_embed_persist_to_string"
              doc="Returns the download specified by @persist as a string instead of downloading
it to a file.
The download is synchronous. An #EphyEmbed must be specified with
ephy_embed_persist_set_embed(). The function implicitly assumes that
#EphyEmbed has not finished downloading, this function will only return the
portion of data which has already been downloaded.
will be encoded as UTF-8.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <property name="dest" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="embed" writable="1" construct-only="1">
        <type name="GObject.Object" c:type="GObject"/>
      </property>
      <property name="filechooser-parent" writable="1">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </property>
      <property name="filechooser-title" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="flags" writable="1">
        <type name="EphyEmbedPersistFlags" c:type="EphyEmbedPersistFlags"/>
      </property>
      <property name="max-size" writable="1">
        <type name="int64" c:type="gint64"/>
      </property>
      <property name="persist-key" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="source" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="user-time" writable="1">
        <type name="uint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyEmbedPersistPrivate"
              c:type="EphyEmbedPersistPrivate*"/>
      </field>
      <glib:signal name="cancelled"
                   doc="The ::cancelled signal is emitted when @persist&apos;s download has been
cancelled with ephy_embed_persist_cancel().">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="completed"
                   doc="The ::completed signal is emitted when @persist has finished downloading. The
download must have started with ephy_embed_persist_save().">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyEmbedPersistClass"
            c:type="EphyEmbedPersistClass"
            glib:is-gtype-struct-for="EphyEmbedPersist">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="completed">
        <callback name="completed" c:type="completed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="persist" transfer-ownership="none">
              <type name="EphyEmbedPersist" c:type="EphyEmbedPersist*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancelled">
        <callback name="cancelled" c:type="cancelled">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="persist" transfer-ownership="none">
              <type name="EphyEmbedPersist" c:type="EphyEmbedPersist*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <bitfield name="EphyEmbedPersistFlags"
              glib:type-name="EphyEmbedPersistFlags"
              glib:get-type="ephy_embed_persist_flags_get_type"
              c:type="EphyEmbedPersistFlags">
      <member name="copy_page"
              value="1"
              c:identifier="EPHY_EMBED_PERSIST_COPY_PAGE"
              glib:nick="copy-page"/>
      <member name="maindoc"
              value="2"
              c:identifier="EPHY_EMBED_PERSIST_MAINDOC"
              glib:nick="maindoc"/>
      <member name="no_view"
              value="4"
              c:identifier="EPHY_EMBED_PERSIST_NO_VIEW"
              glib:nick="no-view"/>
      <member name="ask_destination"
              value="8"
              c:identifier="EPHY_EMBED_PERSIST_ASK_DESTINATION"
              glib:nick="ask-destination"/>
      <member name="do_conversion"
              value="16"
              c:identifier="EPHY_EMBED_PERSIST_DO_CONVERSION"
              glib:nick="do-conversion"/>
      <member name="from_cache"
              value="32"
              c:identifier="EPHY_EMBED_PERSIST_FROM_CACHE"
              glib:nick="from-cache"/>
      <member name="no_certdialogs"
              value="64"
              c:identifier="EPHY_EMBED_PERSIST_NO_CERTDIALOGS"
              glib:nick="no-certdialogs"/>
      <member name="no_cookies"
              value="128"
              c:identifier="EPHY_EMBED_PERSIST_NO_COOKIES"
              glib:nick="no-cookies"/>
    </bitfield>
    <record name="EphyEmbedPersistPrivate" c:type="EphyEmbedPersistPrivate">
    </record>
    <record name="EphyEmbedPrivate" c:type="EphyEmbedPrivate">
    </record>
    <class name="EphyEmbedShell"
           c:type="EphyEmbedShell"
           parent="GObject.Object"
           glib:type-name="EphyEmbedShell"
           glib:get-type="ephy_embed_shell_get_type"
           glib:type-struct="EphyEmbedShellClass">
      <function name="get_default"
                c:identifier="ephy_embed_shell_get_default"
                doc="Retrieves the default #EphyEmbedShell object">
        <return-value transfer-ownership="none"
                      doc="the default #EphyEmbedShell">
          <type name="EphyEmbedShell" c:type="EphyEmbedShell*"/>
        </return-value>
      </function>
      <virtual-method name="get_embed_single" invoker="get_embed_single">
        <return-value transfer-ownership="full">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </virtual-method>
      <method name="get_favicon_cache"
              c:identifier="ephy_embed_shell_get_favicon_cache"
              doc="Returns the favicons cache.">
        <return-value transfer-ownership="none" doc="the favicons cache">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_global_history"
              c:identifier="ephy_embed_shell_get_global_history">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_downloader_view"
              c:identifier="ephy_embed_shell_get_downloader_view">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_downloader_view_nocreate"
              c:identifier="ephy_embed_shell_get_downloader_view_nocreate">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_encodings"
              c:identifier="ephy_embed_shell_get_encodings">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_embed_single"
              c:identifier="ephy_embed_shell_get_embed_single">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_adblock_manager"
              c:identifier="ephy_embed_shell_get_adblock_manager"
              doc="Returns the adblock manager.">
        <return-value transfer-ownership="none" doc="the adblock manager">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="prepare_close"
              c:identifier="ephy_embed_shell_prepare_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_page_setup"
              c:identifier="ephy_embed_shell_set_page_setup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_setup" transfer-ownership="none">
            <type name="Gtk.PageSetup" c:type="GtkPageSetup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_setup"
              c:identifier="ephy_embed_shell_get_page_setup">
        <return-value transfer-ownership="none">
          <type name="Gtk.PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
      </method>
      <method name="set_print_settings"
              c:identifier="ephy_embed_shell_set_print_settings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gtk.PrintSettings" c:type="GtkPrintSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_print_settings"
              c:identifier="ephy_embed_shell_get_print_settings">
        <return-value transfer-ownership="full">
          <type name="Gtk.PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyEmbedShellPrivate" c:type="EphyEmbedShellPrivate*"/>
      </field>
      <glib:signal name="prepare-close">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="quit"
                   doc="The ::quit is emitted when all windows (browser windows, popups,
download windows, etc) are closed and the @shell is ready to be
closed."
                   version="2.30">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyEmbedShellClass"
            c:type="EphyEmbedShellClass"
            glib:is-gtype-struct-for="EphyEmbedShell">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="prepare_close">
        <callback name="prepare_close" c:type="prepare_close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EphyEmbedShell" c:type="EphyEmbedShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_embed_single">
        <callback name="get_embed_single" c:type="get_embed_single">
          <return-value transfer-ownership="full">
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EphyEmbedShell" c:type="EphyEmbedShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyEmbedShellPrivate" c:type="EphyEmbedShellPrivate">
    </record>
    <class name="EphyEmbedSingle"
           c:type="EphyEmbedSingle"
           parent="GObject.Object"
           glib:type-name="EphyEmbedSingle"
           glib:get-type="ephy_embed_single_get_type"
           glib:type-struct="EphyEmbedSingleClass">
      <implements name="EphyPermissionManager"/>
      <method name="initialize"
              c:identifier="ephy_embed_single_initialize"
              doc="Performs startup initialisations. Must be called before calling
any other methods.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="open_window"
              c:identifier="ephy_embed_single_open_window"
              doc="Opens a new window, as if it were opened in @parent using the Javascript
&amp;quot;_blank&amp;quot;, &amp;quot;@features&amp;quot;);&lt;/code&gt;.
&quot;chrome&quot;, a #GtkMozEmbed.
required.">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_cache"
              c:identifier="ephy_embed_single_clear_cache"
              doc="Clears the HTTP cache (temporarily saved web pages).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="clear_auth_cache"
              c:identifier="ephy_embed_single_clear_auth_cache"
              doc="Clears the HTTP authentication cache.
This does not clear regular website passwords; it only clears the HTTP
authentication cache. Websites which use HTTP authentication require the
browser to send a password along with every HTTP request; the browser will
ask the user for the password once and then cache the password for subsequent
HTTP requests. This function will clear the HTTP authentication cache,
meaning the user will have to re-enter a username and password the next time
Epiphany requests a web page secured with HTTP authentication.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_network_status"
              c:identifier="ephy_embed_single_set_network_status">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="online" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_status"
              c:identifier="ephy_embed_single_get_network_status"
              doc="Gets the state of the network connection.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_form_auth"
              c:identifier="ephy_embed_single_get_form_auth"
              doc="Gets a #GSList of all stored login/passwords, in
#EphyEmbedSingleFormAuthData format, for any form in @uri, or %NULL
if we have none.
The #EphyEmbedSingleFormAuthData structs and the #GSList are owned
by @single and should not be freed by the user.">
        <return-value transfer-ownership="full">
          <type name="GLib.SList" c:type="GSList*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_form_auth"
              c:identifier="ephy_embed_single_add_form_auth"
              doc="Adds a new entry to the local cache of form auth data stored in">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="form_username" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="form_password" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="network-status" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyEmbedSinglePrivate" c:type="EphyEmbedSinglePrivate*"/>
      </field>
      <glib:signal name="add-search-engine">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-content">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-window"
                   doc="The ::new_window signal is emitted when a new window needs to be opened.
For example, when a JavaScript popup window was opened.
Return a new #EphyEmbed.">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget"/>
        </return-value>
        <parameters>
          <parameter name="parent_embed" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget"/>
          </parameter>
          <parameter name="mask" transfer-ownership="none">
            <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EphyEmbedSingleClass"
            c:type="EphyEmbedSingleClass"
            glib:is-gtype-struct-for="EphyEmbedSingle">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="new_window">
        <callback name="new_window" c:type="new_window">
          <return-value transfer-ownership="full">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </return-value>
          <parameters>
            <parameter name="single" transfer-ownership="none">
              <type name="EphyEmbedSingle" c:type="EphyEmbedSingle*"/>
            </parameter>
            <parameter name="parent_embed" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
            <parameter name="chromemask" transfer-ownership="none">
              <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_content">
        <callback name="handle_content" c:type="handle_content">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EphyEmbedSingle" c:type="EphyEmbedSingle*"/>
            </parameter>
            <parameter name="mime_type" transfer-ownership="full">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="full">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_search_engine">
        <callback name="add_search_engine" c:type="add_search_engine">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="single" transfer-ownership="none">
              <type name="EphyEmbedSingle" c:type="EphyEmbedSingle*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="icon_url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyEmbedSingleFormAuthData"
            c:type="EphyEmbedSingleFormAuthData">
      <field name="form_username" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="form_password" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="username" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <record name="EphyEmbedSinglePrivate" c:type="EphyEmbedSinglePrivate">
    </record>
    <interface name="EphyExtension"
               c:type="EphyExtension"
               glib:type-name="EphyExtension"
               glib:get-type="ephy_extension_get_type"
               glib:type-struct="EphyExtensionIface">
      <virtual-method name="attach_window" invoker="attach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach_window" invoker="detach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="attach_tab" invoker="attach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach_tab" invoker="detach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="attach_window" c:identifier="ephy_extension_attach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach_window" c:identifier="ephy_extension_detach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_tab" c:identifier="ephy_extension_attach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach_tab" c:identifier="ephy_extension_detach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="EphyExtensionIface"
            c:type="EphyExtensionIface"
            glib:is-gtype-struct-for="EphyExtension">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="attach_window">
        <callback name="attach_window" c:type="attach_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="EphyExtension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="EphyWindow" c:type="EphyWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach_window">
        <callback name="detach_window" c:type="detach_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="EphyExtension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="EphyWindow" c:type="EphyWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="attach_tab">
        <callback name="attach_tab" c:type="attach_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="EphyExtension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="EphyWindow" c:type="EphyWindow*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach_tab">
        <callback name="detach_tab" c:type="detach_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="EphyExtension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="EphyWindow" c:type="EphyWindow*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyExtensionInfo" c:type="EphyExtensionInfo">
      <field name="identifier" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="keyfile" writable="1">
        <type name="GLib.KeyFile" c:type="GKeyFile*"/>
      </field>
      <field name="active" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
      <field name="enabled" writable="1" bits="1">
        <type name="uint" c:type="guint"/>
      </field>
    </record>
    <class name="EphyExtensionsManager"
           c:type="EphyExtensionsManager"
           parent="GObject.Object"
           glib:type-name="EphyExtensionsManager"
           glib:get-type="ephy_extensions_manager_get_type"
           glib:type-struct="EphyExtensionsManagerClass">
      <implements name="EphyExtension"/>
      <method name="startup" c:identifier="ephy_extensions_manager_startup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="load"
              c:identifier="ephy_extensions_manager_load"
              doc="Loads the extension corresponding to @identifier.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload"
              c:identifier="ephy_extensions_manager_unload"
              doc="Unloads the extension specified by @identifier.
The extension with the same filename can afterwards be reloaded. However,
if any GTypes within the extension have changed parent types, Epiphany must
be restarted.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register"
              c:identifier="ephy_extensions_manager_register"
              doc="Registers @object with the extensions manager. @object must implement the
#EphyExtension interface.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extensions"
              c:identifier="ephy_extensions_manager_get_extensions"
              doc="Returns the list of known extensions.
#EphyExtensionInfo">
        <return-value transfer-ownership="container" doc="a list of">
          <type name="GLib.List" c:type="GList*">
            <type name="EphyEmbed"/>
          </type>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyExtensionsManagerPrivate"
              c:type="EphyExtensionsManagerPrivate*"/>
      </field>
      <glib:signal name="added">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="any" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EphyExtensionsManagerClass"
            c:type="EphyExtensionsManagerClass"
            glib:is-gtype-struct-for="EphyExtensionsManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="added">
        <callback name="added" c:type="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyExtensionsManager"
                    c:type="EphyExtensionsManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="EphyExtensionInfo" c:type="EphyExtensionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyExtensionsManager"
                    c:type="EphyExtensionsManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="EphyExtensionInfo" c:type="EphyExtensionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed" c:type="removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyExtensionsManager"
                    c:type="EphyExtensionsManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="EphyExtensionInfo" c:type="EphyExtensionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyExtensionsManagerPrivate"
            c:type="EphyExtensionsManagerPrivate">
    </record>
    <class name="EphyFaviconCache"
           c:type="EphyFaviconCache"
           parent="GObject.Object"
           glib:type-name="EphyFaviconCache"
           glib:get-type="ephy_favicon_cache_get_type"
           glib:type-struct="EphyFaviconCacheClass">
      <constructor name="new" c:identifier="ephy_favicon_cache_new">
        <return-value transfer-ownership="full">
          <type name="EphyFaviconCache" c:type="EphyFaviconCache*"/>
        </return-value>
      </constructor>
      <method name="get" c:identifier="ephy_favicon_cache_get">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ephy_favicon_cache_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyFaviconCachePrivate"
              c:type="EphyFaviconCachePrivate*"/>
      </field>
      <glib:signal name="changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EphyFaviconCacheClass"
            c:type="EphyFaviconCacheClass"
            glib:is-gtype-struct-for="EphyFaviconCache">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cache" transfer-ownership="none">
              <type name="EphyFaviconCache" c:type="EphyFaviconCache*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyFaviconCachePrivate" c:type="EphyFaviconCachePrivate">
    </record>
    <class name="EphyFindToolbar"
           c:type="EphyFindToolbar"
           parent="Gtk.Toolbar"
           glib:type-name="EphyFindToolbar"
           glib:get-type="ephy_find_toolbar_get_type"
           glib:type-struct="EphyFindToolbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Gtk.ToolShell"/>
      <constructor name="new" c:identifier="ephy_find_toolbar_new">
        <return-value transfer-ownership="full">
          <type name="EphyFindToolbar" c:type="EphyFindToolbar*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_text" c:identifier="ephy_find_toolbar_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_embed" c:identifier="ephy_find_toolbar_set_embed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_next" c:identifier="ephy_find_toolbar_find_next">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="find_previous"
              c:identifier="ephy_find_toolbar_find_previous">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="open" c:identifier="ephy_find_toolbar_open">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="links_only" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="clear_search" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="ephy_find_toolbar_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="request_close"
              c:identifier="ephy_find_toolbar_request_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="window" readable="0" writable="1" construct-only="1">
        <type name="EphyWindow" c:type="EphyWindow"/>
      </property>
      <field name="parent">
        <type name="Gtk.Toolbar" c:type="GtkToolbar"/>
      </field>
      <field name="priv">
        <type name="EphyFindToolbarPrivate" c:type="EphyFindToolbarPrivate*"/>
      </field>
      <glib:signal name="close">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="next">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="previous">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyFindToolbarClass"
            c:type="EphyFindToolbarClass"
            glib:is-gtype-struct-for="EphyFindToolbar">
      <field name="parent_class">
        <type name="Gtk.ToolbarClass" c:type="GtkToolbarClass"/>
      </field>
      <field name="next">
        <callback name="next" c:type="next">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="EphyFindToolbar" c:type="EphyFindToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="previous">
        <callback name="previous" c:type="previous">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="EphyFindToolbar" c:type="EphyFindToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close" c:type="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="EphyFindToolbar" c:type="EphyFindToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyFindToolbarPrivate" c:type="EphyFindToolbarPrivate">
    </record>
    <class name="EphyHistory"
           c:type="EphyHistory"
           parent="GObject.Object"
           glib:type-name="EphyHistory"
           glib:get-type="ephy_history_get_type"
           glib:type-struct="EphyHistoryClass">
      <constructor name="new" c:identifier="ephy_history_new">
        <return-value transfer-ownership="full">
          <type name="EphyHistory" c:type="EphyHistory*"/>
        </return-value>
      </constructor>
      <method name="get_hosts" c:identifier="ephy_history_get_hosts">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_host" c:identifier="ephy_history_get_host">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages" c:identifier="ephy_history_get_pages">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_page" c:identifier="ephy_history_get_page">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_page" c:identifier="ephy_history_add_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="redirect" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="toplevel" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_page_visited"
              c:identifier="ephy_history_is_page_visited">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_visits"
              c:identifier="ephy_history_get_page_visits">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_title" c:identifier="ephy_history_set_page_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_page" c:identifier="ephy_history_get_last_page">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_icon" c:identifier="ephy_history_set_icon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="ephy_history_get_icon">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ephy_history_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_enabled" c:identifier="ephy_history_is_enabled">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_enabled" c:identifier="ephy_history_set_enabled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyHistoryPrivate" c:type="EphyHistoryPrivate*"/>
      </field>
      <glib:signal name="add-page">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cleared">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="icon-updated">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="redirect">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="visited">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EphyHistoryClass"
            c:type="EphyHistoryClass"
            glib:is-gtype-struct-for="EphyHistory">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_page">
        <callback name="add_page" c:type="add_page">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="EphyHistory" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="redirect" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
            <parameter name="toplevel" transfer-ownership="none">
              <type name="boolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="visited">
        <callback name="visited" c:type="visited">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="EphyHistory" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cleared">
        <callback name="cleared" c:type="cleared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="EphyHistory" c:type="EphyHistory*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="redirect">
        <callback name="redirect" c:type="redirect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="EphyHistory" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="from_uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="to_uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="icon_updated">
        <callback name="icon_updated" c:type="icon_updated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="EphyHistory" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="icon" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyHistoryPrivate" c:type="EphyHistoryPrivate">
    </record>
    <interface name="EphyLink"
               c:type="EphyLink"
               glib:type-name="EphyLink"
               glib:get-type="ephy_link_get_type"
               glib:type-struct="EphyLinkIface">
      <method name="open" c:identifier="ephy_link_open">
        <return-value transfer-ownership="full">
          <type name="EphyEmbed" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="EphyLinkFlags" c:type="EphyLinkFlags"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="open-link">
        <return-value transfer-ownership="full">
          <type name="Gtk.Widget" c:type="GtkWidget"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="EphyLinkFlags" c:type="EphyLinkFlags"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <class name="EphyLinkAction"
           c:type="EphyLinkAction"
           parent="Gtk.Action"
           glib:type-name="EphyLinkAction"
           glib:get-type="ephy_link_action_get_type"
           glib:type-struct="EphyLinkActionClass">
      <implements name="EphyLink"/>
      <implements name="Gtk.Buildable"/>
      <field name="parent_instance">
        <type name="Gtk.Action" c:type="GtkAction"/>
      </field>
    </class>
    <record name="EphyLinkActionClass"
            c:type="EphyLinkActionClass"
            glib:is-gtype-struct-for="EphyLinkAction">
      <field name="parent_class">
        <type name="Gtk.ActionClass" c:type="GtkActionClass"/>
      </field>
    </record>
    <class name="EphyLinkActionGroup"
           c:type="EphyLinkActionGroup"
           parent="Gtk.ActionGroup"
           glib:type-name="EphyLinkActionGroup"
           glib:get-type="ephy_link_action_group_get_type"
           glib:type-struct="EphyLinkActionGroupClass">
      <implements name="EphyLink"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ephy_link_action_group_new">
        <return-value transfer-ownership="full">
          <type name="EphyLinkActionGroup" c:type="EphyLinkActionGroup*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.ActionGroup" c:type="GtkActionGroup"/>
      </field>
    </class>
    <record name="EphyLinkActionGroupClass"
            c:type="EphyLinkActionGroupClass"
            glib:is-gtype-struct-for="EphyLinkActionGroup">
      <field name="parent_class">
        <type name="Gtk.ActionGroupClass" c:type="GtkActionGroupClass"/>
      </field>
    </record>
    <bitfield name="EphyLinkFlags"
              glib:type-name="EphyLinkFlags"
              glib:get-type="ephy_link_flags_get_type"
              c:type="EphyLinkFlags">
      <member name="new_window"
              value="1"
              c:identifier="EPHY_LINK_NEW_WINDOW"
              glib:nick="new-window"/>
      <member name="new_tab"
              value="2"
              c:identifier="EPHY_LINK_NEW_TAB"
              glib:nick="new-tab"/>
      <member name="jump_to"
              value="4"
              c:identifier="EPHY_LINK_JUMP_TO"
              glib:nick="jump-to"/>
    </bitfield>
    <record name="EphyLinkIface"
            c:type="EphyLinkIface"
            glib:is-gtype-struct-for="EphyLink">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="open_link">
        <callback name="open_link" c:type="open_link">
          <return-value transfer-ownership="full">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </return-value>
          <parameters>
            <parameter name="link" transfer-ownership="none">
              <type name="EphyLink" c:type="EphyLink*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="EphyLinkFlags" c:type="EphyLinkFlags"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EphyLocationAction"
           c:type="EphyLocationAction"
           parent="EphyLinkAction"
           glib:type-name="EphyLocationAction"
           glib:get-type="ephy_location_action_get_type"
           glib:type-struct="EphyLocationActionClass">
      <implements name="EphyLink"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_address"
              c:identifier="ephy_location_action_get_address"
              doc="Retrieves the currently loaded address.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_address"
              c:identifier="ephy_location_action_set_address"
              doc="Sets @address as the address of @action.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="editable" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="icon" writable="1">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf"/>
      </property>
      <property name="lock-stock-id" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="lock-tooltip" writable="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="secure" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="show-lock" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="window" readable="0" writable="1" construct-only="1">
        <type name="GObject.Object" c:type="GObject"/>
      </property>
      <field name="parent">
        <type name="EphyLinkAction" c:type="EphyLinkAction"/>
      </field>
      <field name="priv">
        <type name="EphyLocationActionPrivate"
              c:type="EphyLocationActionPrivate*"/>
      </field>
      <glib:signal name="lock-clicked">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyLocationActionClass"
            c:type="EphyLocationActionClass"
            glib:is-gtype-struct-for="EphyLocationAction">
      <field name="parent_class">
        <type name="EphyLinkActionClass" c:type="EphyLinkActionClass"/>
      </field>
      <field name="lock_clicked">
        <callback name="lock_clicked" c:type="lock_clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="EphyLocationAction" c:type="EphyLocationAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyLocationActionPrivate"
            c:type="EphyLocationActionPrivate">
    </record>
    <bitfield name="EphyNewTabFlags"
              glib:type-name="EphyNewTabFlags"
              glib:get-type="ephy_new_tab_flags_get_type"
              c:type="EphyNewTabFlags">
      <member name="home_page"
              value="1"
              c:identifier="EPHY_NEW_TAB_HOME_PAGE"
              glib:nick="home-page"/>
      <member name="new_page"
              value="2"
              c:identifier="EPHY_NEW_TAB_NEW_PAGE"
              glib:nick="new-page"/>
      <member name="open_page"
              value="4"
              c:identifier="EPHY_NEW_TAB_OPEN_PAGE"
              glib:nick="open-page"/>
      <member name="fullscreen_mode"
              value="16"
              c:identifier="EPHY_NEW_TAB_FULLSCREEN_MODE"
              glib:nick="fullscreen-mode"/>
      <member name="dont_show_window"
              value="32"
              c:identifier="EPHY_NEW_TAB_DONT_SHOW_WINDOW"
              glib:nick="dont-show-window"/>
      <member name="append_last"
              value="128"
              c:identifier="EPHY_NEW_TAB_APPEND_LAST"
              glib:nick="append-last"/>
      <member name="append_after"
              value="256"
              c:identifier="EPHY_NEW_TAB_APPEND_AFTER"
              glib:nick="append-after"/>
      <member name="jump"
              value="512"
              c:identifier="EPHY_NEW_TAB_JUMP"
              glib:nick="jump"/>
      <member name="in_new_window"
              value="1024"
              c:identifier="EPHY_NEW_TAB_IN_NEW_WINDOW"
              glib:nick="in-new-window"/>
      <member name="in_existing_window"
              value="2048"
              c:identifier="EPHY_NEW_TAB_IN_EXISTING_WINDOW"
              glib:nick="in-existing-window"/>
      <member name="from_external"
              value="4096"
              c:identifier="EPHY_NEW_TAB_FROM_EXTERNAL"
              glib:nick="from-external"/>
      <member name="dont_copy_history"
              value="8192"
              c:identifier="EPHY_NEW_TAB_DONT_COPY_HISTORY"
              glib:nick="dont-copy-history"/>
    </bitfield>
    <record name="EphyNode"
            c:type="EphyNode"
            glib:type-name="EphyNode"
            glib:get-type="ephy_node_get_type">
      <constructor name="new" c:identifier="ephy_node_new">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <type name="EphyNodeDb" c:type="EphyNodeDb*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_id" c:identifier="ephy_node_new_with_id">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <type name="EphyNodeDb" c:type="EphyNodeDb*"/>
          </parameter>
          <parameter name="reserved_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xml" c:identifier="ephy_node_new_from_xml">
        <return-value transfer-ownership="full">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <type name="EphyNodeDb" c:type="EphyNodeDb*"/>
          </parameter>
          <parameter name="xml_node" transfer-ownership="none">
            <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_db" c:identifier="ephy_node_get_db">
        <return-value transfer-ownership="none">
          <type name="EphyNodeDb" c:type="EphyNodeDb*"/>
        </return-value>
      </method>
      <method name="get_id" c:identifier="ephy_node_get_id">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
      </method>
      <method name="ref" c:identifier="ephy_node_ref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="ephy_node_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="signal_connect_object"
              c:identifier="ephy_node_signal_connect_object">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="EphyNodeSignalType" c:type="EphyNodeSignalType"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <type name="EphyNodeCallback" c:type="EphyNodeCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_disconnect_object"
              c:identifier="ephy_node_signal_disconnect_object">
        <return-value transfer-ownership="none">
          <type name="uint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="EphyNodeSignalType" c:type="EphyNodeSignalType"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <type name="EphyNodeCallback" c:type="EphyNodeCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_disconnect"
              c:identifier="ephy_node_signal_disconnect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="signal_id" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property" c:identifier="ephy_node_set_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property" c:identifier="ephy_node_get_property">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_string"
              c:identifier="ephy_node_get_property_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_string"
              c:identifier="ephy_node_set_property_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_boolean"
              c:identifier="ephy_node_get_property_boolean">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_boolean"
              c:identifier="ephy_node_set_property_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_long"
              c:identifier="ephy_node_get_property_long">
        <return-value transfer-ownership="none">
          <type name="long" c:type="long"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_long"
              c:identifier="ephy_node_set_property_long">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="long" c:type="long"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_int"
              c:identifier="ephy_node_get_property_int">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_int"
              c:identifier="ephy_node_set_property_int">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_double"
              c:identifier="ephy_node_get_property_double">
        <return-value transfer-ownership="none">
          <type name="double" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_double"
              c:identifier="ephy_node_set_property_double">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="double" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_float"
              c:identifier="ephy_node_get_property_float">
        <return-value transfer-ownership="none">
          <type name="float" c:type="float"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_float"
              c:identifier="ephy_node_set_property_float">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="float" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_node"
              c:identifier="ephy_node_get_property_node">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_xml" c:identifier="ephy_node_write_to_xml">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="writer" transfer-ownership="none">
            <type name="libxml2.TextWriter" c:type="xmlTextWriterPtr"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_child" c:identifier="ephy_node_add_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_child" c:identifier="ephy_node_remove_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_children" c:identifier="ephy_node_sort_children">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call">
            <type name="GLib.CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_child" c:identifier="ephy_node_has_child">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_children"
              c:identifier="ephy_node_reorder_children">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_order"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children" c:identifier="ephy_node_get_children">
        <return-value transfer-ownership="none">
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="EphyNode"/>
          </array>
        </return-value>
      </method>
      <method name="get_n_children" c:identifier="ephy_node_get_n_children">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_nth_child" c:identifier="ephy_node_get_nth_child">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_index" c:identifier="ephy_node_get_child_index">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_next_child" c:identifier="ephy_node_get_next_child">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_previous_child"
              c:identifier="ephy_node_get_previous_child">
        <return-value transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_drag_source"
              c:identifier="ephy_node_set_is_drag_source">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allow" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_drag_source"
              c:identifier="ephy_node_get_is_drag_source">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_is_drag_dest"
              c:identifier="ephy_node_set_is_drag_dest">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allow" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_drag_dest"
              c:identifier="ephy_node_get_is_drag_dest">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <callback name="EphyNodeCallback" c:type="EphyNodeCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </callback>
    <class name="EphyNodeDb"
           c:type="EphyNodeDb"
           parent="GObject.Object"
           glib:type-name="EphyNodeDb"
           glib:get-type="ephy_node_db_get_type"
           glib:type-struct="EphyNodeDbClass">
      <constructor name="new"
                   c:identifier="ephy_node_db_new"
                   doc="Creates and returns a new #EphyNodeDb, named @name.">
        <return-value transfer-ownership="full">
          <type name="EphyNodeDb" c:type="EphyNodeDb*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="load_from_file"
              c:identifier="ephy_node_db_load_from_file"
              doc="Populates @db with data from @xml_file. The node database will be populated
with everything inside of the @xml_root tag from @xml_file. If @xml_version
is different from the version attribute of the @xml_root element, this
function will fail.
The data will most probably have been stored using
ephy_node_db_write_to_xml_safe().">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="xml_file" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="xml_root" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="xml_version" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_xml_safe"
              c:identifier="ephy_node_db_write_to_xml_safe"
              doc="Writes @db&apos;s data to an XML file for storage. The data can be retrieved in
the future using ephy_node_db_load_from_file().
The function arguments are straightforward until @node, at which point some
explanation is necessary.
The variable argument list starts at @node, which is an #EphyNode containing
data to write to @filename. The next argument is an integer specifying the
number of &lt;quote&gt;exception&lt;/quote&gt; nodes. After this integer, that number of
#EphyNode arguments should be given. Each of these &lt;quote&gt;exception&lt;/quote&gt;
nodes determines which data out of @node will &lt;emphasis&gt;not&lt;/emphasis&gt; be
written to @filename.
To insert all of an #EphyNode&apos;s contents without exception, simply give the
integer %0 after @node.
The remainder of this function&apos;s arguments will be groups of such #EphyNode -
integer - (list of #EphyNode&lt;!-- --&gt;s). Finally, the last argument must be
%NULL.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="EphyNode" c:type="EphyNode*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ephy_node_db_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="is_immutable" c:identifier="ephy_node_db_is_immutable">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_immutable"
              c:identifier="ephy_node_db_set_immutable"
              doc="If @immutable is %TRUE, sets @db immutable (read-only). Otherwise, sets @db
to be read-write.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="immutable" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_node_from_id"
              c:identifier="ephy_node_db_get_node_from_id"
              doc="Returns the #EphyNode with id @id from @db, or %NULL if no such id exists.">
        <return-value transfer-ownership="none" doc="an #EphyNode">
          <type name="EphyNode" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="uint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="immutable" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="name" writable="1" construct-only="1">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphyNodeDbPrivate" c:type="EphyNodeDbPrivate*"/>
      </field>
    </class>
    <record name="EphyNodeDbClass"
            c:type="EphyNodeDbClass"
            glib:is-gtype-struct-for="EphyNodeDb">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EphyNodeDbPrivate" c:type="EphyNodeDbPrivate">
    </record>
    <callback name="EphyNodeFilterFunc" c:type="EphyNodeFilterFunc">
      <return-value transfer-ownership="none">
        <type name="boolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter transfer-ownership="none">
          <type name="EphyNode" c:type="EphyNode*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <type name="any" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="EphyNodeSignalType" c:type="EphyNodeSignalType">
      <member name="destroy" value="0" c:identifier="EPHY_NODE_DESTROY"/>
      <member name="restored" value="1" c:identifier="EPHY_NODE_RESTORED"/>
      <member name="changed" value="2" c:identifier="EPHY_NODE_CHANGED"/>
      <member name="child_added"
              value="3"
              c:identifier="EPHY_NODE_CHILD_ADDED"/>
      <member name="child_changed"
              value="4"
              c:identifier="EPHY_NODE_CHILD_CHANGED"/>
      <member name="child_removed"
              value="5"
              c:identifier="EPHY_NODE_CHILD_REMOVED"/>
      <member name="children_reordered"
              value="6"
              c:identifier="EPHY_NODE_CHILDREN_REORDERED"/>
    </enumeration>
    <class name="EphyNotebook"
           c:type="EphyNotebook"
           parent="Gtk.Notebook"
           glib:type-name="EphyNotebook"
           glib:get-type="ephy_notebook_get_type"
           glib:type-struct="EphyNotebookClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="EphyLink"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="tab_close_req">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_tab" c:identifier="ephy_notebook_add_tab">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_tabs" c:identifier="ephy_notebook_set_show_tabs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_tabs" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dnd_enabled"
              c:identifier="ephy_notebook_set_dnd_enabled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_focused_pages"
              c:identifier="ephy_notebook_get_focused_pages">
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <property name="dnd-enabled" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="show-tabs" writable="1">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Gtk.Notebook" c:type="GtkNotebook"/>
      </field>
      <field name="priv">
        <type name="EphyNotebookPrivate" c:type="EphyNotebookPrivate*"/>
      </field>
      <glib:signal name="tab-close-request">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EphyNotebookClass"
            c:type="EphyNotebookClass"
            glib:is-gtype-struct-for="EphyNotebook">
      <field name="parent_class">
        <type name="Gtk.NotebookClass" c:type="GtkNotebookClass"/>
      </field>
      <field name="tab_close_req">
        <callback name="tab_close_req" c:type="tab_close_req">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="EphyNotebook" c:type="EphyNotebook*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="EphyEmbed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyNotebookPrivate" c:type="EphyNotebookPrivate">
    </record>
    <enumeration name="EphyPermission"
                 glib:type-name="EphyPermission"
                 glib:get-type="ephy_permission_get_type"
                 c:type="EphyPermission">
      <member name="allowed"
              value="0"
              c:identifier="EPHY_PERMISSION_ALLOWED"
              glib:nick="allowed"/>
      <member name="denied"
              value="1"
              c:identifier="EPHY_PERMISSION_DENIED"
              glib:nick="denied"/>
      <member name="default"
              value="2"
              c:identifier="EPHY_PERMISSION_DEFAULT"
              glib:nick="default"/>
    </enumeration>
    <record name="EphyPermissionInfo"
            c:type="EphyPermissionInfo"
            glib:type-name="EphyPermissionInfo"
            glib:get-type="ephy_permission_info_get_type">
      <field name="host" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="qtype" writable="1">
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="permission" writable="1">
        <type name="EphyPermission" c:type="EphyPermission"/>
      </field>
      <constructor name="new" c:identifier="ephy_permission_info_new">
        <return-value transfer-ownership="full">
          <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="permission" transfer-ownership="none">
            <type name="EphyPermission" c:type="EphyPermission"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="ephy_permission_info_copy">
        <return-value transfer-ownership="full">
          <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
        </return-value>
      </method>
      <method name="free"
              c:identifier="ephy_permission_info_free"
              doc="Frees @info.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <interface name="EphyPermissionManager"
               c:type="EphyPermissionManager"
               glib:type-name="EphyPermissionManager"
               glib:get-type="ephy_permission_manager_get_type"
               glib:type-struct="EphyPermissionManagerIface">
      <virtual-method name="added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deleted">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cleared">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="permission" transfer-ownership="none">
            <type name="EphyPermission" c:type="EphyPermission"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="test">
        <return-value transfer-ownership="full">
          <type name="EphyPermission" c:type="EphyPermission"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_permission"
              c:identifier="ephy_permission_manager_add_permission"
              doc="Adds the specified permission to the permissions database.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="permission" transfer-ownership="none">
            <type name="EphyPermission" c:type="EphyPermission"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_permission"
              c:identifier="ephy_permission_manager_remove_permission"
              doc="Removes the specified permission from the permissions database. This implies
that the browser should use defaults when next visiting the specified">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_permissions"
              c:identifier="ephy_permission_manager_clear_permissions">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="test_permission"
              c:identifier="ephy_permission_manager_test_permission"
              doc="Retrieves an #EphyPermissionType from the permissions database. If there is
no entry for this @type and @host, it will return %EPHY_PERMISSION_DEFAULT.
In that case, the caller may need to determine the appropriate default
behavior.">
        <return-value transfer-ownership="full">
          <type name="EphyPermission" c:type="EphyPermission"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_permissions"
              c:identifier="ephy_permission_manager_list_permissions">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="permission-added">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="EphyPermissionInfo" c:type="EphyPermissionInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permission-changed">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="EphyPermissionInfo" c:type="EphyPermissionInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permission-deleted">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="EphyPermissionInfo" c:type="EphyPermissionInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permissions-cleared">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="EphyPermissionManagerIface"
            c:type="EphyPermissionManagerIface"
            glib:is-gtype-struct-for="EphyPermissionManager">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="added">
        <callback name="added" c:type="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed" c:type="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deleted">
        <callback name="deleted" c:type="deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="EphyPermissionInfo" c:type="EphyPermissionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cleared">
        <callback name="cleared" c:type="cleared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add">
        <callback name="add" c:type="add">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="host" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="permission" transfer-ownership="none">
              <type name="EphyPermission" c:type="EphyPermission"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove" c:type="remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="host" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear">
        <callback name="clear" c:type="clear">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="test">
        <callback name="test" c:type="test">
          <return-value transfer-ownership="full">
            <type name="EphyPermission" c:type="EphyPermission"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="host" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list">
        <callback name="list" c:type="list">
          <return-value transfer-ownership="full">
            <type name="GLib.List" c:type="GList*"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="EphyPermissionManager"
                    c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EphySearchEntry"
           c:type="EphySearchEntry"
           parent="Gtk.Entry"
           glib:type-name="EphySearchEntry"
           glib:get-type="ephy_search_entry_get_type"
           glib:type-struct="EphySearchEntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new"
                   c:identifier="ephy_search_entry_new"
                   doc="Creates a new #EphySearchEntry.">
        <return-value transfer-ownership="full">
          <type name="EphySearchEntry" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="clear"
              c:identifier="ephy_search_entry_clear"
              doc="Clears the text of the internal #GtkEntry of @entry.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Gtk.Entry" c:type="GtkEntry"/>
      </field>
      <field name="priv">
        <type name="EphySearchEntryPrivate" c:type="EphySearchEntryPrivate*"/>
      </field>
      <glib:signal name="search">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EphySearchEntryClass"
            c:type="EphySearchEntryClass"
            glib:is-gtype-struct-for="EphySearchEntry">
      <field name="parent">
        <type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
      </field>
      <field name="search">
        <callback name="search" c:type="search">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="EphySearchEntry" c:type="EphySearchEntry*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphySearchEntryPrivate" c:type="EphySearchEntryPrivate">
    </record>
    <class name="EphySession"
           c:type="EphySession"
           parent="GObject.Object"
           glib:type-name="EphySession"
           glib:get-type="ephy_session_get_type"
           glib:type-struct="EphySessionClass">
      <implements name="EphyExtension"/>
      <method name="get_active_window"
              c:identifier="ephy_session_get_active_window"
              doc="Get the current active browser window. Use it when you
need to take an action (like opening an url) on
a window but you dont have a target window.
window, or NULL of there is none.">
        <return-value transfer-ownership="none"
                      doc="the current active non-popup browser">
          <type name="EphyWindow" c:type="EphyWindow*"/>
        </return-value>
      </method>
      <method name="save" c:identifier="ephy_session_save">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ephy_session_load">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="ephy_session_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_windows"
              c:identifier="ephy_session_get_windows"
              doc="open #EphyWindow:s.">
        <return-value transfer-ownership="container" doc="the list of">
          <type name="GLib.List" c:type="GList*">
            <type name="EphyWindow"/>
          </type>
        </return-value>
      </method>
      <method name="add_window"
              c:identifier="ephy_session_add_window"
              doc="Add a tool window to the session. #EphyWindow take care of adding
itself to session.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_window"
              c:identifier="ephy_session_remove_window"
              doc="Remove a tool window from the session.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window"
                     transfer-ownership="none"
                     doc=" history window.">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_command" c:identifier="ephy_session_queue_command">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="op" transfer-ownership="none">
            <type name="EphySessionCommand" c:type="EphySessionCommand"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-window">
        <type name="EphyWindow" c:type="EphyWindow"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EphySessionPrivate" c:type="EphySessionPrivate*"/>
      </field>
    </class>
    <record name="EphySessionClass"
            c:type="EphySessionClass"
            glib:is-gtype-struct-for="EphySession">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="EphySessionCommand" c:type="EphySessionCommand">
      <member name="resume_session"
              value="0"
              c:identifier="EPHY_SESSION_CMD_RESUME_SESSION"/>
      <member name="load_session"
              value="1"
              c:identifier="EPHY_SESSION_CMD_LOAD_SESSION"/>
      <member name="open_bookmarks_editor"
              value="2"
              c:identifier="EPHY_SESSION_CMD_OPEN_BOOKMARKS_EDITOR"/>
      <member name="open_uris"
              value="3"
              c:identifier="EPHY_SESSION_CMD_OPEN_URIS"/>
      <member name="maybe_open_window"
              value="4"
              c:identifier="EPHY_SESSION_CMD_MAYBE_OPEN_WINDOW"/>
      <member name="last" value="5" c:identifier="EPHY_SESSION_CMD_LAST"/>
    </enumeration>
    <record name="EphySessionPrivate" c:type="EphySessionPrivate">
    </record>
    <class name="EphyShell"
           c:type="EphyShell"
           parent="EphyEmbedShell"
           glib:type-name="EphyShell"
           glib:get-type="ephy_shell_get_type"
           glib:type-struct="EphyShellClass">
      <constructor name="new_tab"
                   c:identifier="ephy_shell_new_tab"
                   doc="Create a new tab and the parent window when necessary.
Use this function to open urls in new window/tabs.">
        <return-value transfer-ownership="none" doc="the created #EphyEmbed">
          <type name="EphyShell" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="shell" transfer-ownership="none">
            <type name="EphyShell" c:type="EphyShell*"/>
          </parameter>
          <parameter name="parent_window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="previous_embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="EphyNewTabFlags" c:type="EphyNewTabFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_tab_full"
                   c:identifier="ephy_shell_new_tab_full"
                   doc="Create a new tab and the parent window when necessary.
Use this function to open urls in new window/tabs.">
        <return-value transfer-ownership="none" doc="the created #EphyEmbed">
          <type name="EphyShell" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="shell" transfer-ownership="none">
            <type name="EphyShell" c:type="EphyShell*"/>
          </parameter>
          <parameter name="parent_window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="previous_embed" transfer-ownership="none">
            <type name="EphyEmbed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="WebKit.NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="EphyNewTabFlags" c:type="EphyNewTabFlags"/>
          </parameter>
          <parameter name="chrome" transfer-ownership="none">
            <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
          </parameter>
          <parameter name="is_popup" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_default"
                c:identifier="ephy_shell_get_default"
                doc="Retrieve the default #EphyShell object">
        <return-value transfer-ownership="none" doc="the default #EphyShell">
          <type name="EphyShell" c:type="EphyShell*"/>
        </return-value>
      </function>
      <method name="get_session"
              c:identifier="ephy_shell_get_session"
              doc="Returns current session.">
        <return-value transfer-ownership="none" doc="the current session.">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_net_monitor" c:identifier="ephy_shell_get_net_monitor">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_bookmarks" c:identifier="ephy_shell_get_bookmarks">
        <return-value transfer-ownership="none">
          <type name="EphyBookmarks" c:type="EphyBookmarks*"/>
        </return-value>
      </method>
      <method name="get_toolbars_model"
              c:identifier="ephy_shell_get_toolbars_model">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="fullscreen" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extensions_manager"
              c:identifier="ephy_shell_get_extensions_manager">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_bookmarks_editor"
              c:identifier="ephy_shell_get_bookmarks_editor">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_history_window"
              c:identifier="ephy_shell_get_history_window">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_pdm_dialog" c:identifier="ephy_shell_get_pdm_dialog">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_prefs_dialog"
              c:identifier="ephy_shell_get_prefs_dialog">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="EphyEmbedShell" c:type="EphyEmbedShell"/>
      </field>
      <field name="priv">
        <type name="EphyShellPrivate" c:type="EphyShellPrivate*"/>
      </field>
    </class>
    <record name="EphyShellClass"
            c:type="EphyShellClass"
            glib:is-gtype-struct-for="EphyShell">
      <field name="parent_class">
        <type name="EphyEmbedShellClass" c:type="EphyEmbedShellClass"/>
      </field>
    </record>
    <record name="EphyShellPrivate" c:type="EphyShellPrivate">
    </record>
    <class name="EphySpinner"
           c:type="EphySpinner"
           parent="Gtk.Widget"
           glib:type-name="EphySpinner"
           glib:get-type="ephy_spinner_get_type"
           glib:type-struct="EphySpinnerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="ephy_spinner_new"
                   doc="Creates a new #EphySpinner. The spinner is a widget
that gives the user feedback about network status with
an animated image.">
        <return-value transfer-ownership="full">
          <type name="EphySpinner" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="start"
              c:identifier="ephy_spinner_start"
              doc="Starts the spinner animation.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="stop"
              c:identifier="ephy_spinner_stop"
              doc="Stops the spinner animation.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_size"
              c:identifier="ephy_spinner_set_size"
              doc="Set the size of the spinner to @size.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <type name="Gtk.IconSize" c:type="GtkIconSize"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
      <field name="details">
        <type name="EphySpinnerDetails" c:type="EphySpinnerDetails*"/>
      </field>
    </class>
    <record name="EphySpinnerClass"
            c:type="EphySpinnerClass"
            glib:is-gtype-struct-for="EphySpinner">
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <record name="EphySpinnerDetails" c:type="EphySpinnerDetails">
    </record>
    <bitfield name="EphyStateWindowFlags" c:type="EphyStateWindowFlags">
      <member name="none"
              value="0"
              c:identifier="EPHY_STATE_WINDOW_SAVE_NONE"/>
      <member name="size"
              value="1"
              c:identifier="EPHY_STATE_WINDOW_SAVE_SIZE"/>
      <member name="position"
              value="2"
              c:identifier="EPHY_STATE_WINDOW_SAVE_POSITION"/>
    </bitfield>
    <class name="EphyStatusbar"
           c:type="EphyStatusbar"
           parent="Gtk.Statusbar"
           glib:type-name="EphyStatusbar"
           glib:get-type="ephy_statusbar_get_type"
           glib:type-struct="EphyStatusbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="ephy_statusbar_new"
                   doc="Creates a new #EphyStatusbar.">
        <return-value transfer-ownership="full">
          <type name="EphyStatusbar" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_security_frame"
              c:identifier="ephy_statusbar_get_security_frame">
        <return-value transfer-ownership="none"
                      doc="the statusbar&apos;s lock icon frame">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_caret_mode"
              c:identifier="ephy_statusbar_set_caret_mode"
              doc="Sets the statusbar&apos;s caret browsing mode indicator.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_state"
              c:identifier="ephy_statusbar_set_security_state"
              doc="Sets the statusbar&apos;s security icon and its tooltip.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stock_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_popups_state"
              c:identifier="ephy_statusbar_set_popups_state"
              doc="Sets the statusbar&apos;s popup-blocker icon&apos;s tooltip and visibility.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="hidden" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_widget"
              c:identifier="ephy_statusbar_add_widget"
              doc="Adds the @widget to the statusbar. Use this function whenever you want to
add a widget to the statusbar. You can remove the widget again with
ephy_statusbar_remove_widget().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_widget"
              c:identifier="ephy_statusbar_remove_widget"
              doc="Removes @widget, which must have been added to @statusbar using
ephy_statusbar_add_widget ().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Statusbar" c:type="GtkStatusbar"/>
      </field>
      <field name="priv">
        <type name="EphyStatusbarPrivate" c:type="EphyStatusbarPrivate*"/>
      </field>
      <glib:signal name="lock-clicked">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyStatusbarClass"
            c:type="EphyStatusbarClass"
            glib:is-gtype-struct-for="EphyStatusbar">
      <field name="parent_class">
        <type name="Gtk.StatusbarClass" c:type="GtkStatusbarClass"/>
      </field>
      <field name="lock_clicked">
        <callback name="lock_clicked" c:type="lock_clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="statusbar" transfer-ownership="none">
              <type name="EphyStatusbar" c:type="EphyStatusbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyStatusbarPrivate" c:type="EphyStatusbarPrivate">
    </record>
    <class name="EphyToolbar"
           c:type="EphyToolbar"
           parent="EggEditableToolbar"
           glib:type-name="EphyToolbar"
           glib:get-type="ephy_toolbar_get_type"
           glib:type-struct="EphyToolbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="EphyLink"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="ephy_toolbar_new"
                   doc="Creates a new #EphyToolbar and associates it with @window.">
        <return-value transfer-ownership="full">
          <type name="EphyToolbar" c:type="EphyToolbar*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="EphyWindow" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_action_group"
              c:identifier="ephy_toolbar_get_action_group">
        <return-value transfer-ownership="full">
          <type name="Gtk.ActionGroup" c:type="GtkActionGroup*"/>
        </return-value>
      </method>
      <method name="set_favicon"
              c:identifier="ephy_toolbar_set_favicon"
              doc="Sets @icon to be the favicon of @toolbar&apos;s internal #EphyLocationEntry.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_leave_fullscreen"
              c:identifier="ephy_toolbar_set_show_leave_fullscreen"
              doc="Tells @toolbar if it should show the leave fullscreen button or not.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_location"
              c:identifier="ephy_toolbar_activate_location"
              doc="Calls ephy_location_entry_activate on @toolbar&apos;s internal #EphyLocationEntry.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_location"
              c:identifier="ephy_toolbar_get_location"
              doc="Gets the current address according to @toolbar&apos;s #EphyLocationAction.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_location"
              c:identifier="ephy_toolbar_set_location"
              doc="Sets the internal #EphyLocationAction address to @address.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_navigation_actions"
              c:identifier="ephy_toolbar_set_navigation_actions"
              doc="Sets the sensivity of navigation buttons in the @toolbar.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="back" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="forward" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="up" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_navigation_tooltips"
              c:identifier="ephy_toolbar_set_navigation_tooltips"
              doc="Sets the titles of back and forward pages as the tooltips of its corresponding
navigation buttons.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="back_title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="forward_title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_state"
              c:identifier="ephy_toolbar_set_security_state"
              doc="Sets properties on the lock icon inside the internal #EphyLocationEntry.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="is_secure" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="show_lock" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="stock_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="tooltip" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spinning"
              c:identifier="ephy_toolbar_set_spinning"
              doc="Controls the internal #EphySpinner activity.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="spinning" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zoom"
              c:identifier="ephy_toolbar_set_zoom"
              doc="Sets the zoom level to @zoom, but only if @can_zoom is %TRUE.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="can_zoom" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
          <parameter name="zoom" transfer-ownership="none">
            <type name="float" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <property name="window" readable="0" writable="1" construct-only="1">
        <type name="EphyWindow" c:type="EphyWindow"/>
      </property>
      <field name="parent_object">
        <type name="EggEditableToolbar" c:type="EggEditableToolbar"/>
      </field>
      <field name="priv">
        <type name="EphyToolbarPrivate" c:type="EphyToolbarPrivate*"/>
      </field>
      <glib:signal name="activation-finished">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="exit-clicked">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="lock-clicked">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EphyToolbarClass"
            c:type="EphyToolbarClass"
            glib:is-gtype-struct-for="EphyToolbar">
      <field name="parent_class">
        <type name="EggEditableToolbarClass" c:type="EggEditableToolbarClass"/>
      </field>
      <field name="activation_finished">
        <callback name="activation_finished" c:type="activation_finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="EphyToolbar" c:type="EphyToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="exit_clicked">
        <callback name="exit_clicked" c:type="exit_clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="EphyToolbar" c:type="EphyToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lock_clicked">
        <callback name="lock_clicked" c:type="lock_clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="EphyToolbar" c:type="EphyToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EphyToolbarPrivate" c:type="EphyToolbarPrivate">
    </record>
    <class name="EphyWebView"
           c:type="EphyWebView"
           parent="WebKit.WebView"
           glib:type-name="EphyWebView"
           glib:get-type="ephy_web_view_get_type"
           glib:type-struct="EphyWebViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="ephy_web_view_new"
                   doc="Equivalent to g_object_new() but returns an #GtkWidget so you don&apos;t have
to cast it when dealing with most code.">
        <return-value transfer-ownership="full">
          <type name="EphyWebView" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="feed_link">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_link">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dom_mouse_click">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="EphyEmbedEvent" c:type="EphyEmbedEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dom_mouse_down">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="EphyEmbedEvent" c:type="EphyEmbedEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="popup_blocked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="modal_alert">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="modal_alert_closed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="load_request"
              c:identifier="ephy_web_view_load_request"
              doc="Loads the given #WebKitNetworkRequest in the given #EphyWebView.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <type name="WebKit.NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_url"
              c:identifier="ephy_web_view_load_url"
              doc="Loads @url in @view.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_back_history"
              c:identifier="ephy_web_view_copy_back_history"
              doc="Sets the back history (up to the current item) of @source as the
back history of @dest.
Useful to keep the history when opening links in new tabs or
windows.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <type name="EphyWebView" c:type="EphyWebView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_history"
              c:identifier="ephy_web_view_clear_history"
              doc="Clears history of @view.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_loading"
              c:identifier="ephy_web_view_is_loading"
              doc="Returns whether the web page in @view has finished loading. A web
page is only finished loading after all images, styles, and other
dependencies have been downloaded and rendered, or when the load
has failed for some reason.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_loading_title"
              c:identifier="ephy_web_view_get_loading_title"
              doc="Returns the loading title for @view.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_icon"
              c:identifier="ephy_web_view_get_icon"
              doc="Returns the view&apos;s site icon as a #GdkPixbuf,
or %NULL if it is not available.">
        <return-value transfer-ownership="none"
                      doc="a the view&apos;s site icon">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_document_type"
              c:identifier="ephy_web_view_get_document_type"
              doc="Returns the type of document loaded in the @view">
        <return-value transfer-ownership="full">
          <type name="EphyWebViewDocumentType"
                c:type="EphyWebViewDocumentType"/>
        </return-value>
      </method>
      <method name="get_navigation_flags"
              c:identifier="ephy_web_view_get_navigation_flags"
              doc="Returns @view&apos;s navigation flags.">
        <return-value transfer-ownership="full">
          <type name="EphyWebViewNavigationFlags"
                c:type="EphyWebViewNavigationFlags"/>
        </return-value>
      </method>
      <method name="get_status_message"
              c:identifier="ephy_web_view_get_status_message"
              doc="Returns the message displayed in @view&apos;s #EphyWindow&apos;s
#EphyStatusbar. If the user is hovering the mouse over a hyperlink,
this function will return the same value as
ephy_web_view_get_link_message(). Otherwise, it will return a network
status message, or NULL.
The message returned has a limited lifetime, and so should be copied with
g_strdup() if it must be stored.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_link_message"
              c:identifier="ephy_web_view_get_link_message"
              doc="When the user is hovering the mouse over a hyperlink, returns the URL of the
hyperlink.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_visibility"
              c:identifier="ephy_web_view_get_visibility"
              doc="Returns whether the @view&apos;s toplevel is visible or not. Used
mostly for popup visibility management.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_link_message"
              c:identifier="ephy_web_view_set_link_message"
              doc="Sets the value of link-message property which tells the URL of the hovered
link.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="link_message" transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_level"
              c:identifier="ephy_web_view_set_security_level"
              doc="Sets @view&apos;s security-level property to @level.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <type name="EphyWebViewSecurityLevel"
                  c:type="EphyWebViewSecurityLevel"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visibility"
              c:identifier="ephy_web_view_set_visibility"
              doc="Sets whether the @view&apos;s toplevel is visible or not. See
ephy_web_view_get_visibility().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visibility" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_typed_address"
              c:identifier="ephy_web_view_get_typed_address"
              doc="Returns the text that @view&apos;s #EphyWindow will display in its location toolbar
entry when @view is selected.
This is not guaranteed to be the same as @view&apos;s location,
available through ephy_web_view_get_location(). As the user types a new address
into the location entry, ephy_web_view_get_location()&apos;s returned string will
change.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_typed_address"
              c:identifier="ephy_web_view_set_typed_address"
              doc="Sets the text that @view&apos;s #EphyWindow will display in its location toolbar
entry when @view is selected.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_blank"
              c:identifier="ephy_web_view_get_is_blank"
              doc="Returns whether the  @view&apos;s address is &quot;blank&quot;.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="has_modified_forms"
              c:identifier="ephy_web_view_has_modified_forms"
              doc="Returns %TRUE if the user has modified &amp;lt;input&amp;gt; or &amp;lt;textarea&amp;gt;
values in @view&apos;s loaded document.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_location"
              c:identifier="ephy_web_view_get_location"
              doc="Returns the URL of the web page displayed in @view.
If the web page contains frames, @toplevel will determine which location to
retrieve. If @toplevel is %TRUE, the return value will be the location of the
frameset document. If @toplevel is %FALSE, the return value will be the
location of the currently-focused frame.">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="toplevel" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="go_up"
              c:identifier="ephy_web_view_go_up"
              doc="Moves @view one level up in its web page&apos;s directory hierarchy.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_js_status"
              c:identifier="ephy_web_view_get_js_status"
              doc="Displays the message JavaScript is attempting to display in the statusbar.
Note that Epiphany does not display JavaScript statusbar messages.
statusbar">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_security_level"
              c:identifier="ephy_web_view_get_security_level"
              doc="Fetches the #EphyWebViewSecurityLevel and a string description of the
security state of @view.  The description will be a newly-allocated
string or %NULL.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="level"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     doc="return value of security level">
            <type name="EphyWebViewSecurityLevel"
                  c:type="EphyWebViewSecurityLevel*"/>
          </parameter>
          <parameter name="description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     doc="return value of the description of the security level">
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_page_certificate"
              c:identifier="ephy_web_view_show_page_certificate"
              doc="Shows a dialogue displaying the certificate of the currently loaded page
of @view, if it was loaded over a secure connection; else does nothing.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="show_print_preview"
              c:identifier="ephy_web_view_show_print_preview">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="print" c:identifier="ephy_web_view_print">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_go_up_list"
              c:identifier="ephy_web_view_get_go_up_list"
              doc="Returns a list of (%char *) URLs to higher-level directories on the same
server, in order of deepest to shallowest. For example, given
&quot;http://www.example.com/dir/subdir/file.html&quot;, will return a list containing
&quot;http://www.example.com/dir/subdir/&quot;, &quot;http://www.example.com/dir/&quot; and
&quot;http://www.example.com/&quot;.
hierarchy">
        <return-value transfer-ownership="full">
          <type name="GLib.SList" c:type="GSList*"/>
        </return-value>
      </method>
      <method name="set_title"
              c:identifier="ephy_web_view_set_title"
              doc="Sets @view title to @view_title.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="view_title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ephy_web_view_get_title">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="can_go_up"
              c:identifier="ephy_web_view_can_go_up"
              doc="Returns whether @view can travel to a higher-level directory on the server.
For example, for http://www.example.com/subdir/foo.html, returns %TRUE; for
http://www.example.com/, returns %FALSE.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_address"
              c:identifier="ephy_web_view_get_address"
              doc="Returns the address of the currently loaded page.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_title_composite"
              c:identifier="ephy_web_view_get_title_composite"
              doc="Returns the title of the web page loaded in @view.
This differs from #ephy_web_view_get_title in that this function
will return a special title while the page is still loading.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_address"
              c:identifier="ephy_web_view_set_address"
              doc="Sets @view location to be @address. Note that this function might also set
the typed-address property to %NULL.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_from_net_state"
              c:identifier="ephy_web_view_update_from_net_state"
              doc="Update @view at @uri with info from @state.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="EphyWebViewNetState" c:type="EphyWebViewNetState"/>
          </parameter>
        </parameters>
      </method>
      <method name="location_changed"
              c:identifier="ephy_web_view_location_changed"
              doc="Sets @location as the new address for @view while preventing notify events
in @view.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loading_title"
              c:identifier="ephy_web_view_set_loading_title"
              doc="Update @view&apos;s loading title to @title, if @is_address is %TRUE it will
retrieve the title of the page at @title.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_address" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="popups_manager_reset"
              c:identifier="ephy_web_view_popups_manager_reset"
              doc="Resets the state of the popups manager in @view.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="save"
              c:identifier="ephy_web_view_save"
              doc="Saves the currently loaded page of @view to @uri.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address" doc="View&apos;s current address.">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="document-type"
                doc="Document type determined for the view.">
        <type name="EphyWebViewDocumentType" c:type="EphyWebViewDocumentType"/>
      </property>
      <property name="embed-title" doc="Title for this embed.">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="hidden-popup-count"
                doc="Number of hidden (blocked) popup windows.">
        <type name="int" c:type="gint"/>
      </property>
      <property name="icon" doc="View&apos;s favicon set by the loaded site.">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf"/>
      </property>
      <property name="link-message" doc="???">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="navigation"
                doc="View&apos;s navigation flags as #EphyWebViewNavigationFlags.">
        <type name="EphyWebViewNavigationFlags"
              c:type="EphyWebViewNavigationFlags"/>
      </property>
      <property name="popups-allowed"
                writable="1"
                doc="If popup windows from this view are to be displayed.">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <property name="security-level"
                doc="One of #EphyWebViewSecurityLevel, determining view&apos;s current security level.">
        <type name="EphyWebViewSecurityLevel"
              c:type="EphyWebViewSecurityLevel"/>
      </property>
      <property name="status-message"
                doc="Statusbar message corresponding to this view.">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="typed-address"
                writable="1"
                doc="User typed address for the current view.">
        <type name="utf8" c:type="gchararray"/>
      </property>
      <property name="visibility">
        <type name="boolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="WebKit.WebView" c:type="WebKitWebView"/>
      </field>
      <field name="priv">
        <type name="EphyWebViewPrivate" c:type="EphyWebViewPrivate*"/>
      </field>
      <glib:signal name="close-request">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="content-blocked"
                   doc="The ::content-blocked signal is emitted when an url has been blocked.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-dom-mouse-click"
                   doc="The ::ge_dom_mouse_click signal is emitted when the user clicks in the @view.">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-dom-mouse-down"
                   doc="The ::ge_dom_mouse_down signal is emitted when the user depresses a mouse
button.">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-feed-link"
                   doc="The ::ge_rss signal is emitted when @embed discovers that a news feed
is available for the site it is visiting.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-modal-alert"
                   doc="The ::ge-modal-alert signal is emitted when a DOM event will open a
modal alert.
Return %TRUE to prevent the dialog from being opened.">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="ge-modal-alert-closed"
                   doc="The ::ge-modal-alert-closed signal is emitted when a modal alert put up by a
DOM event was closed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="ge-popup-blocked"
                   doc="The ::ge_popup_blocked signal is emitted when the viewed web page requests
a popup window (with javascript:open()) but popup windows are not allowed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-search-link"
                   doc="The ::ge_rss signal is emitted when @embed discovers that a search
description is available for the site it is visiting.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-document-now"
                   doc="The ::new-document-now signal is emitted when a new page content
is being loaded into the browser. It&apos;s a good place to do view
related changes, for example to restore the zoom level of a page
or to set an user style sheet.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="gchararray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-window"
                   doc="The ::new-window signal is emitted after a new window has been opened by
the view. For example, when a JavaScript popup window is opened.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_view" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="search-key-press"
                   doc="The ::search-key-press signal is emitted for keypresses which
should be used for find implementations.">
        <return-value transfer-ownership="full">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.Event" c:type="GdkEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="EphyWebViewChrome"
              glib:type-name="EphyWebViewChrome"
              glib:get-type="ephy_web_view_chrome_get_type"
              c:type="EphyWebViewChrome">
      <member name="menubar"
              value="1"
              c:identifier="EPHY_WEB_VIEW_CHROME_MENUBAR"
              glib:nick="menubar"/>
      <member name="toolbar"
              value="2"
              c:identifier="EPHY_WEB_VIEW_CHROME_TOOLBAR"
              glib:nick="toolbar"/>
      <member name="statusbar"
              value="4"
              c:identifier="EPHY_WEB_VIEW_CHROME_STATUSBAR"
              glib:nick="statusbar"/>
      <member name="bookmarksbar"
              value="8"
              c:identifier="EPHY_WEB_VIEW_CHROME_BOOKMARKSBAR"
              glib:nick="bookmarksbar"/>
    </bitfield>
    <record name="EphyWebViewClass"
            c:type="EphyWebViewClass"
            glib:is-gtype-struct-for="EphyWebView">
      <field name="parent_class">
        <type name="WebKit.WebViewClass" c:type="WebKitWebViewClass"/>
      </field>
      <field name="feed_link">
        <callback name="feed_link" c:type="feed_link">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_link">
        <callback name="search_link" c:type="search_link">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dom_mouse_click">
        <callback name="dom_mouse_click" c:type="dom_mouse_click">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="EphyEmbedEvent" c:type="EphyEmbedEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dom_mouse_down">
        <callback name="dom_mouse_down" c:type="dom_mouse_down">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="EphyEmbedEvent" c:type="EphyEmbedEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="popup_blocked">
        <callback name="popup_blocked" c:type="popup_blocked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="target" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="features" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="content_blocked">
        <callback name="content_blocked" c:type="content_blocked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modal_alert">
        <callback name="modal_alert" c:type="modal_alert">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modal_alert_closed">
        <callback name="modal_alert_closed" c:type="modal_alert_closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_window">
        <callback name="new_window" c:type="new_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="new_view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_key_press">
        <callback name="search_key_press" c:type="search_key_press">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close_request">
        <callback name="close_request" c:type="close_request">
          <return-value transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_document_now">
        <callback name="new_document_now" c:type="new_document_now">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="EphyWebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="EphyWebViewDocumentType"
                 c:type="EphyWebViewDocumentType">
      <member name="html"
              value="0"
              c:identifier="EPHY_WEB_VIEW_DOCUMENT_HTML"/>
      <member name="xml" value="1" c:identifier="EPHY_WEB_VIEW_DOCUMENT_XML"/>
      <member name="image"
              value="2"
              c:identifier="EPHY_WEB_VIEW_DOCUMENT_IMAGE"/>
      <member name="other"
              value="3"
              c:identifier="EPHY_WEB_VIEW_DOCUMENT_OTHER"/>
    </enumeration>
    <bitfield name="EphyWebViewNavigationFlags"
              c:type="EphyWebViewNavigationFlags">
      <member name="up" value="1" c:identifier="EPHY_WEB_VIEW_NAV_UP"/>
      <member name="back" value="2" c:identifier="EPHY_WEB_VIEW_NAV_BACK"/>
      <member name="forward"
              value="4"
              c:identifier="EPHY_WEB_VIEW_NAV_FORWARD"/>
    </bitfield>
    <bitfield name="EphyWebViewNetState"
              glib:type-name="EphyWebViewNetState"
              glib:get-type="ephy_web_view_net_state_get_type"
              c:type="EphyWebViewNetState">
      <member name="unknown"
              value="0"
              c:identifier="EPHY_WEB_VIEW_STATE_UNKNOWN"
              glib:nick="unknown"/>
      <member name="start"
              value="1"
              c:identifier="EPHY_WEB_VIEW_STATE_START"
              glib:nick="start"/>
      <member name="redirecting"
              value="2"
              c:identifier="EPHY_WEB_VIEW_STATE_REDIRECTING"
              glib:nick="redirecting"/>
      <member name="transferring"
              value="4"
              c:identifier="EPHY_WEB_VIEW_STATE_TRANSFERRING"
              glib:nick="transferring"/>
      <member name="negotiating"
              value="8"
              c:identifier="EPHY_WEB_VIEW_STATE_NEGOTIATING"
              glib:nick="negotiating"/>
      <member name="stop"
              value="16"
              c:identifier="EPHY_WEB_VIEW_STATE_STOP"
              glib:nick="stop"/>
      <member name="is_request"
              value="32"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_REQUEST"
              glib:nick="is-request"/>
      <member name="is_document"
              value="64"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_DOCUMENT"
              glib:nick="is-document"/>
      <member name="is_network"
              value="128"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_NETWORK"
              glib:nick="is-network"/>
      <member name="is_window"
              value="256"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_WINDOW"
              glib:nick="is-window"/>
      <member name="restoring"
              value="512"
              c:identifier="EPHY_WEB_VIEW_STATE_RESTORING"
              glib:nick="restoring"/>
    </bitfield>
    <record name="EphyWebViewPrivate" c:type="EphyWebViewPrivate">
    </record>
    <enumeration name="EphyWebViewSecurityLevel"
                 glib:type-name="EphyWebViewSecurityLevel"
                 glib:get-type="ephy_web_view_security_level_get_type"
                 c:type="EphyWebViewSecurityLevel">
      <member name="unknown"
              value="0"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_UNKNOWN"
              glib:nick="unknown"/>
      <member name="insecure"
              value="1"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_INSECURE"
              glib:nick="insecure"/>
      <member name="broken"
              value="2"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_BROKEN"
              glib:nick="broken"/>
      <member name="secure_low"
              value="3"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_SECURE_LOW"
              glib:nick="secure-low"/>
      <member name="secure_med"
              value="4"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_SECURE_MED"
              glib:nick="secure-med"/>
      <member name="secure_high"
              value="5"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_SECURE_HIGH"
              glib:nick="secure-high"/>
    </enumeration>
    <class name="EphyWindow"
           c:type="EphyWindow"
           parent="Gtk.Window"
           glib:type-name="EphyWindow"
           glib:get-type="ephy_window_get_type"
           glib:type-struct="EphyWindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="EphyEmbedContainer"/>
      <implements name="EphyLink"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="ephy_window_new"
                   doc="Equivalent to g_object_new() but returns an #EphyWindow so you don&apos;t have
to cast it.">
        <return-value transfer-ownership="full">
          <type name="EphyWindow" c:type="EphyWindow*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_chrome"
                   c:identifier="ephy_window_new_with_chrome"
                   doc="Identical to ephy_window_new(), but allows you to specify a chrome.">
        <return-value transfer-ownership="full">
          <type name="EphyWindow" c:type="EphyWindow*"/>
        </return-value>
        <parameters>
          <parameter name="chrome" transfer-ownership="none">
            <type name="EphyWebViewChrome" c:type="EphyWebViewChrome"/>
          </parameter>
          <parameter name="is_popup" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_ui_manager"
              c:identifier="ephy_window_get_ui_manager"
              doc="Returns this window&apos;s UI manager.">
        <return-value transfer-ownership="none" doc="an #GtkUIManager">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_toolbar"
              c:identifier="ephy_window_get_toolbar"
              doc="Returns this window&apos;s toolbar as an #EggEditableToolbar.">
        <return-value transfer-ownership="none" doc="an #EggEditableToolbar">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_notebook"
              c:identifier="ephy_window_get_notebook"
              doc="Returns the #GtkNotebook used by this window.">
        <return-value transfer-ownership="none"
                      doc="the @window&apos;s #GtkNotebook">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_find_toolbar"
              c:identifier="ephy_window_get_find_toolbar"
              doc="Returns the #EphyFindToolbar used by this window.">
        <return-value transfer-ownership="none"
                      doc="the @window&apos;s #EphyFindToolbar">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_statusbar"
              c:identifier="ephy_window_get_statusbar"
              doc="Returns this window&apos;s statusbar as an #EphyStatusbar.">
        <return-value transfer-ownership="none"
                      doc="This window&apos;s statusbar">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="load_url"
              c:identifier="ephy_window_load_url"
              doc="Loads a new url in the active tab of @window.
Unlike ephy_web_view_load_url(), this function activates
the embed.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zoom"
              c:identifier="ephy_window_set_zoom"
              doc="Sets the zoom on @window&apos;s active #EphyEmbed. A @zoom of 1.0 corresponds to
100% zoom (normal size).">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="zoom" transfer-ownership="none">
            <type name="float" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_location"
              c:identifier="ephy_window_activate_location"
              doc="Activates the location entry on @window&apos;s toolbar.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_context_event"
              c:identifier="ephy_window_get_context_event"
              doc="Returns the #EphyEmbedEvent for the current context menu.
Use this to get the event from the action callback.">
        <return-value transfer-ownership="none"
                      doc="an #EphyEmbedEvent, or %NULL">
          <type name="EphyEmbedEvent" c:type="EphyEmbedEvent*"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="EphyWindowPrivate" c:type="EphyWindowPrivate*"/>
      </field>
    </class>
    <record name="EphyWindowClass"
            c:type="EphyWindowClass"
            glib:is-gtype-struct-for="EphyWindow">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <record name="EphyWindowPrivate" c:type="EphyWindowPrivate">
    </record>
    <function name="ephy_link_flags_from_current_event"
              c:identifier="ephy_link_flags_from_current_event">
      <return-value transfer-ownership="full">
        <type name="EphyLinkFlags" c:type="EphyLinkFlags"/>
      </return-value>
    </function>
    <function name="ephy_state_add_expander"
              c:identifier="ephy_state_add_expander">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="default_state" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="ephy_state_add_paned" c:identifier="ephy_state_add_paned">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="paned" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="default_width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="ephy_state_add_window"
              c:identifier="ephy_state_add_window">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="default_width" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="default_heigth" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="maximize" transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <type name="EphyStateWindowFlags" c:type="EphyStateWindowFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="ephy_state_save" c:identifier="ephy_state_save">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
